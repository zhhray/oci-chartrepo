---
swagger: "2.0"
info:
  description: "These APIs provide services for manipulating Harbor project."
  version: "2.0"
  title: "Harbor API"
host: "localhost"
basePath: "/api/v2.0"
schemes:
- "http"
- "https"
consumes:
- "application/json"
produces:
- "application/json"
- "text/plain"
security:
- basicAuth: []
paths:
  /health:
    get:
      tags:
      - "Products"
      summary: "Health check API"
      description: "The endpoint returns the health stauts of the system.\n"
      parameters: []
      responses:
        "200":
          description: "The system health status."
          schema:
            $ref: "#/definitions/OverallHealthStatus"
  /search:
    get:
      tags:
      - "Products"
      summary: "Search for projects, repositories and helm charts"
      description: "The Search endpoint returns information about the projects ,repositories\
        \  and helm charts offered at public status or related to the current logged\
        \ in user. The response includes the project, repository list and charts in\
        \ a proper display order.\n"
      parameters:
      - name: "q"
        in: "query"
        description: "Search parameter for project and repository name."
        required: true
        type: "string"
        x-exportParamName: "Q"
      responses:
        "200":
          description: "An array of search results"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Search"
        "500":
          description: "Unexpected internal errors."
  /projects/{project_id}/metadatas:
    get:
      tags:
      - "Products"
      summary: "Get project metadata."
      description: "This endpoint returns metadata of the project specified by project\
        \ ID.\n"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The ID of project."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      responses:
        "200":
          description: "Get metadata successfully."
          schema:
            $ref: "#/definitions/ProjectMetadata"
        "401":
          description: "User need to login first."
        "500":
          description: "Internal server errors."
    post:
      tags:
      - "Products"
      summary: "Add metadata for the project."
      description: "This endpoint is aimed to add metadata of a project.\n"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Selected project ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - in: "body"
        name: "metadata"
        description: "The metadata of project."
        required: true
        schema:
          $ref: "#/definitions/ProjectMetadata"
        x-exportParamName: "Metadata"
      responses:
        "200":
          description: "Add metadata successfully."
        "400":
          description: "Invalid request."
        "401":
          description: "User need to log in first."
        "403":
          description: "User does not have permission to the project."
        "404":
          description: "Project ID does not exist."
        "415":
          description: "The Media Type of the request is not supported, it has to\
            \ be \"application/json\""
        "500":
          description: "Internal server errors."
  /projects/{project_id}/metadatas/{meta_name}:
    get:
      tags:
      - "Products"
      summary: "Get project metadata"
      description: "This endpoint returns specified metadata of a project.\n"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Project ID for filtering results."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - name: "meta_name"
        in: "path"
        description: "The name of metadat."
        required: true
        type: "string"
        x-exportParamName: "MetaName"
      responses:
        "200":
          description: "Get metadata successfully."
          schema:
            $ref: "#/definitions/ProjectMetadata"
        "401":
          description: "User need to log in first."
        "500":
          description: "Internal server errors."
    put:
      tags:
      - "Products"
      summary: "Update metadata of a project."
      description: "This endpoint is aimed to update the metadata of a project.\n"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The ID of project."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - name: "meta_name"
        in: "path"
        description: "The name of metadat."
        required: true
        type: "string"
        x-exportParamName: "MetaName"
      responses:
        "200":
          description: "Updated metadata successfully."
        "400":
          description: "Invalid request."
        "401":
          description: "User need to log in first."
        "403":
          description: "User does not have permission to the project."
        "404":
          description: "Project or metadata does not exist."
        "500":
          description: "Internal server errors."
    delete:
      tags:
      - "Products"
      summary: "Delete metadata of a project"
      description: "This endpoint is aimed to delete metadata of a project.\n"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The ID of project."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - name: "meta_name"
        in: "path"
        description: "The name of metadat."
        required: true
        type: "string"
        x-exportParamName: "MetaName"
      responses:
        "200":
          description: "Metadata is deleted successfully."
        "400":
          description: "Invalid requst."
        "403":
          description: "User need to log in first."
        "404":
          description: "Project or metadata does not exist."
        "500":
          description: "Internal server errors."
  /projects/{project_id}/members:
    get:
      tags:
      - "Products"
      summary: "Get all project member information"
      description: "Get all project member information"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Relevant project ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - name: "entityname"
        in: "query"
        description: "The entity name to search."
        required: false
        type: "string"
        x-exportParamName: "Entityname"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Get project members successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ProjectMemberEntity"
        "400":
          description: "The project id is invalid."
        "401":
          description: "User need to log in first."
        "403":
          description: "User in session does not have permission to the project."
        "404":
          description: "Project ID does not exist."
        "500":
          description: "Unexpected internal errors."
    post:
      tags:
      - "Products"
      summary: "Create project member"
      description: "Create project member relationship, the member can be one of the\
        \ user_member and group_member,  The user_member need to specify user_id or\
        \ username. If the user already exist in harbor DB, specify the user_id, \
        \ If does not exist in harbor DB, it will SearchAndOnBoard the user. The group_member\
        \ need to specify id or ldap_group_dn. If the group already exist in harbor\
        \ DB. specify the user group's id,  If does not exist, it will SearchAndOnBoard\
        \ the group. "
      parameters:
      - name: "project_id"
        in: "path"
        description: "Relevant project ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - in: "body"
        name: "project_member"
        required: false
        schema:
          $ref: "#/definitions/ProjectMember"
        x-exportParamName: "ProjectMember"
      responses:
        "201":
          description: "Project member created successfully."
          headers:
            Location:
              type: "string"
              description: "The URL of the created resource"
        "400":
          description: "Illegal format of project member or project id is invalid,\
            \ or LDAP DN is invalid."
        "401":
          description: "User need to log in first."
        "403":
          description: "User in session does not have permission to the project."
        "409":
          description: "A user group with same group name already exist or an LDAP\
            \ user group with same DN already exist."
        "500":
          description: "Unexpected internal errors."
  /projects/{project_id}/members/{mid}:
    get:
      tags:
      - "Products"
      summary: "Get the project member information"
      description: "Get the project member information"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Relevant project ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - name: "mid"
        in: "path"
        description: "The member ID"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Mid"
      responses:
        "200":
          description: "Project member retrieved successfully."
          schema:
            $ref: "#/definitions/ProjectMemberEntity"
        "400":
          description: "Illegal format of project member or invalid project id, member\
            \ id."
        "401":
          description: "User need to log in first."
        "403":
          description: "User in session does not have permission to the project."
        "404":
          description: "Project or projet member does not exist."
        "500":
          description: "Unexpected internal errors."
    put:
      tags:
      - "Products"
      summary: "Update project member"
      description: "Update project member relationship"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Relevant project ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - name: "mid"
        in: "path"
        description: "Member ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Mid"
      - in: "body"
        name: "role"
        required: false
        schema:
          $ref: "#/definitions/RoleRequest"
        x-exportParamName: "Role"
      responses:
        "200":
          description: "Project member updated successfully."
        "400":
          description: "Invalid role id, it should be 1,2 or 3, or invalid project\
            \ id, or invalid member id."
        "401":
          description: "User need to log in first."
        "403":
          description: "User in session does not have permission to the project."
        "404":
          description: "project or project member does not exist."
        "500":
          description: "Unexpected internal errors."
    delete:
      tags:
      - "Products"
      summary: "Delete project member"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Relevant project ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - name: "mid"
        in: "path"
        description: "Member ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Mid"
      responses:
        "200":
          description: "Project member deleted successfully."
        "400":
          description: "The project id or project member id is invalid."
        "401":
          description: "User need to log in first."
        "403":
          description: "User in session does not have permission to the project."
        "500":
          description: "Unexpected internal errors."
  /statistics:
    get:
      tags:
      - "Products"
      summary: "Get projects number and repositories number relevant to the user"
      description: "This endpoint is aimed to statistic all of the projects number\
        \ and repositories number relevant to the logined user, also the public projects\
        \ number and repositories number. If the user is admin, he can also get total\
        \ projects number and total repositories number.\n"
      parameters: []
      responses:
        "200":
          description: "Get the projects number and repositories number relevant to\
            \ the user successfully."
          schema:
            $ref: "#/definitions/StatisticMap"
        "401":
          description: "User need to log in first."
        "500":
          description: "Unexpected internal errors."
  /users:
    get:
      tags:
      - "Products"
      summary: "Get registered users of Harbor."
      description: "This endpoint is for user to search registered users, support\
        \ for filtering results with username.Notice, by now this operation is only\
        \ for administrator.\n"
      parameters:
      - name: "username"
        in: "query"
        description: "Username for filtering results."
        required: false
        type: "string"
        x-exportParamName: "Username"
        x-optionalDataType: "String"
      - name: "email"
        in: "query"
        description: "Email for filtering results."
        required: false
        type: "string"
        x-exportParamName: "Email"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "The page number, default is 1."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "page_size"
        in: "query"
        description: "The size of per page."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Searched for users of Harbor successfully."
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of available items"
            Link:
              type: "string"
              description: "Link to previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        "400":
          description: "Invalid user ID."
        "401":
          description: "User need to log in first."
        "403":
          description: "User does not have permission of admin role."
        "500":
          description: "Unexpected internal errors."
    post:
      tags:
      - "Products"
      summary: "Creates a new user account."
      description: "This endpoint is to create a user if the user does not already\
        \ exist.\n"
      parameters:
      - in: "body"
        name: "user"
        description: "New created user."
        required: true
        schema:
          $ref: "#/definitions/User"
        x-exportParamName: "User"
      responses:
        "201":
          description: "User created successfully."
          headers:
            Location:
              type: "string"
              description: "The URL of the created resource"
        "400":
          description: "Unsatisfied with constraints of the user creation."
        "403":
          description: "User registration can only be used by admin role user when\
            \ self-registration is off."
        "415":
          description: "The Media Type of the request is not supported, it has to\
            \ be \"application/json\""
        "500":
          description: "Unexpected internal errors."
  /users/current:
    get:
      tags:
      - "Products"
      summary: "Get current user info."
      description: "This endpoint is to get the current user information.\n"
      parameters: []
      responses:
        "200":
          description: "Get current user information successfully."
          schema:
            $ref: "#/definitions/User"
        "401":
          description: "User need to log in first."
  /users/current/permissions:
    get:
      tags:
      - "Products"
      summary: "Get current user permissions."
      description: "This endpoint is to get the current user permissions.\n"
      parameters:
      - name: "scope"
        in: "query"
        description: "Get permissions of the scope"
        required: false
        type: "string"
        x-exportParamName: "Scope"
        x-optionalDataType: "String"
      - name: "relative"
        in: "query"
        description: "If true, the resources in the response are relative to the scope,\n\
          eg for resource '/project/1/repository' if relative is 'true' then the resource\
          \ in response will be 'repository'.\n"
        required: false
        type: "boolean"
        x-exportParamName: "Relative"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Get current user permission successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Permission"
        "401":
          description: "User need to log in first."
        "500":
          description: "Internal errors."
  /users/search:
    get:
      tags:
      - "Products"
      summary: "Search users by username"
      description: "This endpoint is to search the users by username.\n"
      parameters:
      - name: "username"
        in: "query"
        description: "Username for filtering results."
        required: true
        type: "string"
        x-exportParamName: "Username"
      - name: "page"
        in: "query"
        description: "The page number, default is 1."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "page_size"
        in: "query"
        description: "The size of per page."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Search users by username, email successfully."
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of available items"
            Link:
              type: "string"
              description: "Link to previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserSearch"
        "500":
          description: "Unexpected internal errors."
  /users/{user_id}:
    get:
      tags:
      - "Products"
      summary: "Get a user's profile."
      description: "Get user's profile with user id.\n"
      parameters:
      - name: "user_id"
        in: "path"
        description: "Registered user ID"
        required: true
        type: "integer"
        format: "int"
        x-exportParamName: "UserId"
      responses:
        "200":
          description: "Get user's profile successfully."
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid user ID."
        "401":
          description: "User need to log in first."
        "403":
          description: "User does not have permission of admin role."
        "404":
          description: "User ID does not exist."
        "500":
          description: "Unexpected internal errors."
    put:
      tags:
      - "Products"
      summary: "Update a registered user to change his profile."
      description: "This endpoint let a registered user change his profile.\n"
      parameters:
      - name: "user_id"
        in: "path"
        description: "Registered user ID"
        required: true
        type: "integer"
        format: "int"
        x-exportParamName: "UserId"
      - in: "body"
        name: "profile"
        description: "Only email, realname and comment can be modified."
        required: true
        schema:
          $ref: "#/definitions/UserProfile"
        x-exportParamName: "Profile"
      responses:
        "200":
          description: "Updated user's profile successfully."
        "400":
          description: "Invalid user ID."
        "401":
          description: "User need to log in first."
        "403":
          description: "User does not have permission of admin role."
        "404":
          description: "User ID does not exist."
        "500":
          description: "Unexpected internal errors."
    delete:
      tags:
      - "Products"
      summary: "Mark a registered user as be removed."
      description: "This endpoint let administrator of Harbor mark a registered user\
        \ as\nbe removed.It actually won't be deleted from DB.\n"
      parameters:
      - name: "user_id"
        in: "path"
        description: "User ID for marking as to be removed."
        required: true
        type: "integer"
        format: "int"
        x-exportParamName: "UserId"
      responses:
        "200":
          description: "Marked user as be removed successfully."
        "400":
          description: "Invalid user ID."
        "401":
          description: "User need to log in first."
        "403":
          description: "User does not have permission of admin role."
        "404":
          description: "User ID does not exist."
        "500":
          description: "Unexpected internal errors."
  /users/{user_id}/password:
    put:
      tags:
      - "Products"
      summary: "Change the password on a user that already exists."
      description: "This endpoint is for user to update password. Users with the admin\
        \ role can change any user's password. Guest users can change only their own\
        \ password.\n"
      parameters:
      - name: "user_id"
        in: "path"
        description: "Registered user ID."
        required: true
        type: "integer"
        format: "int"
        x-exportParamName: "UserId"
      - in: "body"
        name: "password"
        description: "Password to be updated, the attribute 'old_password' is optional\
          \ when the API is called by the system administrator."
        required: true
        schema:
          $ref: "#/definitions/Password"
        x-exportParamName: "Password"
      responses:
        "200":
          description: "Updated password successfully."
        "400":
          description: "Invalid user ID; Old password is blank; New password is blank."
        "401":
          description: "Don't have authority to change password. Please check login\
            \ status."
        "403":
          description: "The caller does not have permission to update the password\
            \ of the user with given ID, or the old password in request body is not\
            \ correct."
        "500":
          description: "Unexpected internal errors."
  /users/{user_id}/sysadmin:
    put:
      tags:
      - "Products"
      summary: "Update a registered user to change to be an administrator of Harbor."
      description: "This endpoint let a registered user change to be an administrator\n\
        of Harbor.\n"
      parameters:
      - name: "user_id"
        in: "path"
        description: "Registered user ID"
        required: true
        type: "integer"
        format: "int"
        x-exportParamName: "UserId"
      - in: "body"
        name: "sysadmin_flag"
        description: "Toggle a user to admin or not."
        required: true
        schema:
          $ref: "#/definitions/SysAdminFlag"
        x-exportParamName: "SysadminFlag"
      responses:
        "200":
          description: "Updated user's admin role successfully."
        "400":
          description: "Invalid user ID."
        "401":
          description: "User need to log in first."
        "403":
          description: "User does not have permission of admin role."
        "404":
          description: "User ID does not exist."
        "500":
          description: "Unexpected internal errors."
  /users/{user_id}/cli_secret:
    put:
      tags:
      - "Products"
      summary: "Set CLI secret for a user."
      description: "This endpoint let user generate a new CLI secret for himself.\
        \  This API only works when auth mode is set to 'OIDC'.\nOnce this API returns\
        \ with successful status, the old secret will be invalid, as there will be\
        \ only one CLI secret\nfor a user.\n"
      parameters:
      - name: "user_id"
        in: "path"
        description: "User ID"
        required: true
        type: "integer"
        format: "int"
        x-exportParamName: "UserId"
      - in: "body"
        name: "input_secret"
        description: "JSON object that includes the new secret"
        required: true
        schema:
          $ref: "#/definitions/input_secret"
        x-exportParamName: "InputSecret"
      responses:
        "200":
          description: "The secret is successfully updated"
        "400":
          description: "Invalid user ID.  Or user is not onboarded via OIDC authentication.\
            \ Or the secret does not meet the standard."
        "401":
          description: "User need to log in first."
        "403":
          description: "Non-admin user can only generate the cli secret of himself."
        "404":
          description: "User ID does not exist."
        "412":
          description: "The auth mode of the system is not \"oidc_auth\", or the user\
            \ is not onboarded via OIDC AuthN."
        "500":
          description: "Unexpected internal errors."
  /replication/executions:
    get:
      tags:
      - "Products"
      summary: "List replication executions."
      description: "This endpoint let user list replication executions.\n"
      parameters:
      - name: "policy_id"
        in: "query"
        description: "The policy ID."
        required: false
        type: "integer"
        x-exportParamName: "PolicyId"
        x-optionalDataType: "Int32"
      - name: "status"
        in: "query"
        description: "The execution status."
        required: false
        type: "string"
        x-exportParamName: "Status"
        x-optionalDataType: "String"
      - name: "trigger"
        in: "query"
        description: "The trigger mode."
        required: false
        type: "string"
        x-exportParamName: "Trigger"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "The page."
        required: false
        type: "integer"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "page_size"
        in: "query"
        description: "The page size."
        required: false
        type: "integer"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Success"
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of available items"
            Link:
              type: "string"
              description: "Link to previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ReplicationExecution"
        "401":
          description: "User need to login first."
        "403":
          description: "User has no privilege for the operation."
        "500":
          description: "Unexpected internal errors."
    post:
      tags:
      - "Products"
      summary: "Start one execution of the replication."
      description: "This endpoint is for user to start one execution of the replication.\n"
      parameters:
      - in: "body"
        name: "execution"
        description: "The execution that needs to be started, only the property \"\
          policy_id\" is needed."
        required: true
        schema:
          $ref: "#/definitions/ReplicationExecution"
        x-exportParamName: "Execution"
      responses:
        "201":
          description: "Success."
          headers:
            Location:
              type: "string"
              description: "The URL of the created resource"
        "400":
          description: "Bad request."
        "401":
          description: "User need to login first."
        "403":
          description: "User has no privilege for the operation."
        "415":
          description: "The Media Type of the request is not supported, it has to\
            \ be \"application/json\""
        "500":
          description: "Unexpected internal errors."
  /replication/executions/{id}:
    get:
      tags:
      - "Products"
      summary: "Get the execution of the replication."
      description: "This endpoint is for user to get one execution of the replication.\n"
      parameters:
      - name: "id"
        in: "path"
        description: "The execution ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "Success."
          schema:
            $ref: "#/definitions/ReplicationExecution"
        "400":
          description: "Bad request."
        "401":
          description: "User need to login first."
        "403":
          description: "User has no privilege for the operation."
        "404":
          description: "Resource requested does not exist."
        "415":
          description: "The Media Type of the request is not supported, it has to\
            \ be \"application/json\""
        "500":
          description: "Unexpected internal errors."
    put:
      tags:
      - "Products"
      summary: "Stop the execution of the replication."
      description: "This endpoint is for user to stop one execution of the replication.\n"
      parameters:
      - name: "id"
        in: "path"
        description: "The execution ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "Success."
        "400":
          description: "Bad request."
        "401":
          description: "User need to login first."
        "403":
          description: "User has no privilege for the operation."
        "404":
          description: "Resource requested does not exist."
        "415":
          description: "The Media Type of the request is not supported, it has to\
            \ be \"application/json\""
        "500":
          description: "Unexpected internal errors."
  /replication/executions/{id}/tasks:
    get:
      tags:
      - "Products"
      summary: "Get the task list of one execution."
      description: "This endpoint is for user to get the task list of one execution.\n"
      parameters:
      - name: "id"
        in: "path"
        description: "The execution ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      - name: "page"
        in: "query"
        description: "The page number."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "page_size"
        in: "query"
        description: "The size of per page."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Success."
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of available items"
            Link:
              type: "string"
              description: "Link to previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ReplicationTask"
        "400":
          description: "Bad request."
        "401":
          description: "User need to login first."
        "403":
          description: "User has no privilege for the operation."
        "404":
          description: "Resource requested does not exist."
        "500":
          description: "Unexpected internal errors."
  /replication/executions/{id}/tasks/{task_id}/log:
    get:
      tags:
      - "Products"
      summary: "Get the log of one task."
      description: "This endpoint is for user to get the log of one task.\n"
      parameters:
      - name: "id"
        in: "path"
        description: "The execution ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      - name: "task_id"
        in: "path"
        description: "The task ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "TaskId"
      responses:
        "200":
          description: "Success."
        "400":
          description: "Bad request."
        "401":
          description: "User need to login first."
        "403":
          description: "User has no privilege for the operation."
        "404":
          description: "Resource requested does not exist."
        "500":
          description: "Unexpected internal errors."
  /replication/policies:
    get:
      tags:
      - "Products"
      summary: "List replication policies"
      description: "This endpoint let user list replication policies\n"
      parameters:
      - name: "name"
        in: "query"
        description: "The replication policy name."
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "The page number."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "page_size"
        in: "query"
        description: "The size of per page."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Get policy successfully."
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of available items"
            Link:
              type: "string"
              description: "Link to previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ReplicationPolicy"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "500":
          description: "Internal Server Error"
    post:
      tags:
      - "Products"
      summary: "Create a replication policy"
      description: "This endpoint let user create a replication policy\n"
      parameters:
      - in: "body"
        name: "policy"
        description: "The policy model."
        required: true
        schema:
          $ref: "#/definitions/ReplicationPolicy"
        x-exportParamName: "Policy"
      responses:
        "201":
          description: "Created"
          headers:
            Location:
              type: "string"
              description: "The URL of the created resource"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "409":
          description: "Conflict"
        "415":
          description: "The Media Type of the request is not supported, it has to\
            \ be \"application/json\""
        "500":
          description: "Internal Server Error"
  /replication/policies/{id}:
    get:
      tags:
      - "Products"
      summary: "Get replication policy."
      description: "This endpoint let user get replication policy by specific ID.\n"
      parameters:
      - name: "id"
        in: "path"
        description: "policy ID"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "Get the replication policy successfully."
          schema:
            $ref: "#/definitions/ReplicationPolicy"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "500":
          description: "Internal Server Error"
    put:
      tags:
      - "Products"
      summary: "Update the replication policy"
      description: "This endpoint let user update policy.\n"
      parameters:
      - name: "id"
        in: "path"
        description: "policy ID"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      - in: "body"
        name: "policy"
        description: "The replication policy model."
        required: true
        schema:
          $ref: "#/definitions/ReplicationPolicy"
        x-exportParamName: "Policy"
      responses:
        "200":
          description: "Success"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "409":
          description: "Conflict"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "Products"
      summary: "Delete the replication policy specified by ID."
      description: "Delete the replication policy specified by ID.\n"
      parameters:
      - name: "id"
        in: "path"
        description: "Replication policy ID"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "Success"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
        "412":
          description: "Precondition Failed"
        "500":
          description: "Internal Server Error"
  /labels:
    get:
      tags:
      - "Products"
      summary: "List labels according to the query strings."
      description: "This endpoint let user list labels by name, scope and project_id\n"
      parameters:
      - name: "name"
        in: "query"
        description: "The label name."
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "scope"
        in: "query"
        description: "The label scope. Valid values are g and p. g for global labels\
          \ and p for project labels."
        required: true
        type: "string"
        x-exportParamName: "Scope"
      - name: "project_id"
        in: "query"
        description: "Relevant project ID, required when scope is p."
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
        x-optionalDataType: "Int64"
      - name: "page"
        in: "query"
        description: "The page number."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "page_size"
        in: "query"
        description: "The size of per page."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Get successfully."
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of available items"
            Link:
              type: "string"
              description: "Link to previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Label"
        "400":
          description: "Invalid parameters."
        "401":
          description: "User need to log in first."
        "500":
          description: "Unexpected internal errors."
    post:
      tags:
      - "Products"
      summary: "Post creates a label"
      description: "This endpoint let user creates a label.\n"
      parameters:
      - in: "body"
        name: "label"
        description: "The json object of label."
        required: true
        schema:
          $ref: "#/definitions/Label"
        x-exportParamName: "Label"
      responses:
        "201":
          description: "Create successfully."
          headers:
            Location:
              type: "string"
              description: "The URL of the created resource"
        "400":
          description: "Invalid parameters."
        "401":
          description: "User need to log in first."
        "409":
          description: "Label with the same name and same scope already exists."
        "415":
          description: "The Media Type of the request is not supported, it has to\
            \ be \"application/json\""
        "500":
          description: "Unexpected internal errors."
  /labels/{id}:
    get:
      tags:
      - "Products"
      summary: "Get the label specified by ID."
      description: "This endpoint let user get the label by specific ID.\n"
      parameters:
      - name: "id"
        in: "path"
        description: "Label ID"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "Get successfully."
          schema:
            $ref: "#/definitions/Label"
        "401":
          description: "User need to log in first."
        "404":
          description: "The resource does not exist."
        "500":
          description: "Unexpected internal errors."
    put:
      tags:
      - "Products"
      summary: "Update the label properties."
      description: "This endpoint let user update label properties.\n"
      parameters:
      - name: "id"
        in: "path"
        description: "Label ID"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      - in: "body"
        name: "label"
        description: "The updated label json object."
        required: true
        schema:
          $ref: "#/definitions/Label"
        x-exportParamName: "Label"
      responses:
        "200":
          description: "Update successfully."
        "400":
          description: "Invalid parameters."
        "401":
          description: "User need to log in first."
        "404":
          description: "The resource does not exist."
        "409":
          description: "The label with the same name already exists."
        "500":
          description: "Unexpected internal errors."
    delete:
      tags:
      - "Products"
      summary: "Delete the label specified by ID."
      description: "Delete the label specified by ID.\n"
      parameters:
      - name: "id"
        in: "path"
        description: "Label ID"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "Delete successfully."
        "400":
          description: "Invalid parameters."
        "401":
          description: "User need to log in first."
        "404":
          description: "The resource does not exist."
        "500":
          description: "Unexpected internal errors."
  /replication/adapters:
    get:
      tags:
      - "Products"
      summary: "List supported adapters."
      description: "This endpoint let user list supported adapters.\n"
      parameters: []
      responses:
        "200":
          description: "Success."
          schema:
            type: "array"
            items:
              type: "string"
        "401":
          description: "Unauthorized."
        "403":
          description: "Forbidden."
        "500":
          description: "Unexpected internal errors."
  /registries:
    get:
      tags:
      - "Products"
      summary: "List registries."
      description: "List registries according to the query.\n"
      parameters:
      - name: "name"
        in: "query"
        description: "Deprecated, use `q` instead."
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "q"
        in: "query"
        description: "Query string to query resources. Supported query patterns are\
          \ \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"\
          list with union releationship(k={v1 v2 v3})\" and \"list with intersetion\
          \ relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed\
          \ by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of\
          \ these query patterns should be put in the query string \"q=xxx\" and splitted\
          \ by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]"
        required: false
        type: "string"
        x-exportParamName: "Q"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "List registries successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Registry"
        "401":
          description: "User need to log in first."
        "500":
          description: "Unexpected internal errors."
    post:
      tags:
      - "Products"
      summary: "Create a new registry."
      description: "This endpoint is for user to create a new registry.\n"
      parameters:
      - in: "body"
        name: "registry"
        description: "New created registry."
        required: true
        schema:
          $ref: "#/definitions/Registry"
        x-exportParamName: "Registry"
      responses:
        "201":
          description: "Registry created successfully."
          headers:
            Location:
              type: "string"
              description: "The URL of the created resource"
        "400":
          description: "Unsatisfied with constraints of the registry creation."
        "401":
          description: "User need to log in first."
        "409":
          description: "Registry name already exists."
        "415":
          description: "The Media Type of the request is not supported, it has to\
            \ be \"application/json\""
        "500":
          description: "Unexpected internal errors."
  /registries/ping:
    post:
      tags:
      - "Products"
      summary: "Ping status of a registry."
      description: "This endpoint checks status of a registry, the registry can be\
        \ given by ID or URL (together with credential)\n"
      parameters:
      - in: "body"
        name: "registry"
        description: "Registry to ping."
        required: true
        schema:
          $ref: "#/definitions/Registry"
        x-exportParamName: "Registry"
      responses:
        "200":
          description: "Registry is healthy."
        "400":
          description: "No proper registry information provided."
        "401":
          description: "User need to log in first."
        "404":
          description: "Registry not found (when registry is provided by ID)."
        "415":
          description: "The Media Type of the request is not supported, it has to\
            \ be \"application/json\""
        "500":
          description: "Unexpected internal errors."
  /registries/{id}:
    get:
      tags:
      - "Products"
      summary: "Get registry."
      description: "This endpoint is for get specific registry."
      parameters:
      - name: "id"
        in: "path"
        description: "The registry ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "Get registry successfully."
          schema:
            $ref: "#/definitions/Registry"
        "401":
          description: "User need to log in first."
        "404":
          description: "Registry not found"
        "500":
          description: "Unexpected internal errors."
    put:
      tags:
      - "Products"
      summary: "Update a given registry."
      description: "This endpoint is for update a given registry.\n"
      parameters:
      - name: "id"
        in: "path"
        description: "The registry's ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      - in: "body"
        name: "repo_target"
        description: "Updates registry."
        required: true
        schema:
          $ref: "#/definitions/PutRegistry"
        x-exportParamName: "RepoTarget"
      responses:
        "200":
          description: "Updated registry successfully."
        "400":
          description: "The registry is associated with policy which is enabled."
        "401":
          description: "User need to log in first."
        "404":
          description: "Registry does not exist."
        "409":
          description: "Registry name is already used."
        "500":
          description: "Unexpected internal errors."
    delete:
      tags:
      - "Products"
      summary: "Delete specific registry."
      description: "This endpoint is for to delete specific registry.\n"
      parameters:
      - name: "id"
        in: "path"
        description: "The registry's ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "Registry deleted successfully."
        "400":
          description: "Registry's ID is invalid or the registry is used by policies."
        "401":
          description: "Only admin has this authority."
        "404":
          description: "Registry does not exist."
        "500":
          description: "Unexpected internal errors."
  /registries/{id}/info:
    get:
      tags:
      - "Products"
      summary: "Get registry info."
      description: "Get the info of one specific registry."
      parameters:
      - name: "id"
        in: "path"
        description: "The registry ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "Get registry successfully."
          schema:
            $ref: "#/definitions/RegistryInfo"
        "401":
          description: "User need to log in first."
        "404":
          description: "Registry not found"
        "500":
          description: "Unexpected internal errors."
  /registries/{id}/namespace:
    get:
      tags:
      - "Products"
      summary: "List namespaces of registry"
      description: "This endpoint let user list namespaces of registry according to\
        \ query.\n"
      parameters:
      - name: "id"
        in: "path"
        description: "The registry ID."
        required: true
        type: "integer"
        x-exportParamName: "Id"
      - name: "name"
        in: "query"
        description: "The name of namespace."
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Namespace"
        "401":
          description: "User need to login first."
        "403":
          description: "User has no privilege for the operation."
        "404":
          description: "No registry found."
        "500":
          description: "Unexpected internal errors."
  /systeminfo:
    get:
      tags:
      - "Products"
      summary: "Get general system info"
      description: "This API is for retrieving general system info, this can be called\
        \ by anonymous request.\n"
      parameters: []
      responses:
        "200":
          description: "Get general info successfully."
          schema:
            $ref: "#/definitions/GeneralInfo"
        "500":
          description: "Unexpected internal error."
  /systeminfo/volumes:
    get:
      tags:
      - "Products"
      summary: "Get system volume info (total/free size)."
      description: "This endpoint is for retrieving system volume info that only provides\
        \ for admin user.\n"
      parameters: []
      responses:
        "200":
          description: "Get system volumes successfully."
          schema:
            $ref: "#/definitions/SystemInfo"
        "401":
          description: "User need to log in first."
        "403":
          description: "User does not have permission of admin role."
        "500":
          description: "Unexpected internal errors."
  /systeminfo/getcert:
    get:
      tags:
      - "Products"
      summary: "Get default root certificate."
      description: "This endpoint is for downloading a default root certificate.\n"
      parameters: []
      responses:
        "200":
          description: "Get default root certificate successfully."
        "404":
          description: "Not found the default root certificate."
        "500":
          description: "Unexpected internal errors."
  /ldap/ping:
    post:
      tags:
      - "Products"
      summary: "Ping available ldap service."
      description: "This endpoint ping the available ldap service for test related\
        \ configuration parameters.\n"
      parameters:
      - in: "body"
        name: "ldapconf"
        description: "ldap configuration. support input ldap service configuration.\
          \ If it's a empty request, will load current configuration from the system."
        required: false
        schema:
          $ref: "#/definitions/LdapConf"
        x-exportParamName: "Ldapconf"
      responses:
        "200":
          description: "Ping ldap service successfully."
        "400":
          description: "Inviald ldap configuration parameters."
        "401":
          description: "User need to login first."
        "403":
          description: "Only admin has this authority."
        "415":
          description: "The Media Type of the request is not supported, it has to\
            \ be \"application/json\""
        "500":
          description: "Unexpected internal errors."
  /ldap/groups/search:
    get:
      tags:
      - "Products"
      summary: "Search available ldap groups."
      description: "This endpoint searches the available ldap groups based on related\
        \ configuration parameters. support to search by groupname or groupdn.\n"
      parameters:
      - name: "groupname"
        in: "query"
        description: "Ldap group name"
        required: false
        type: "string"
        x-exportParamName: "Groupname"
        x-optionalDataType: "String"
      - name: "groupdn"
        in: "query"
        description: "The LDAP group DN"
        required: false
        type: "string"
        x-exportParamName: "Groupdn"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Search ldap group successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserGroup"
        "400":
          description: "The Ldap group DN is invalid."
        "404":
          description: "No ldap group found."
        "500":
          description: "Unexpected internal errors."
  /ldap/users/search:
    get:
      tags:
      - "Products"
      summary: "Search available ldap users."
      description: "This endpoint searches the available ldap users based on related\
        \ configuration parameters. Support searched by input ladp configuration,\
        \ load configuration from the system and specific filter.\n"
      parameters:
      - name: "username"
        in: "query"
        description: "Registered user ID"
        required: false
        type: "string"
        x-exportParamName: "Username"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Search ldap users successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/LdapUsers"
        "401":
          description: "User need to login first."
        "403":
          description: "Only admin has this authority."
        "500":
          description: "Unexpected internal errors."
  /ldap/users/import:
    post:
      tags:
      - "Products"
      summary: "Import selected available ldap users."
      description: "This endpoint adds the selected available ldap users to harbor\
        \ based on related configuration parameters from the system. System will try\
        \ to guess the user email address and realname, add to harbor user information.\n\
        If have errors when import user, will return the list of importing failed\
        \ uid and the failed reason.\n"
      parameters:
      - in: "body"
        name: "uid_list"
        description: "The uid listed for importing. This list will check users validity\
          \ of ldap service based on configuration from the system."
        required: true
        schema:
          $ref: "#/definitions/LdapImportUsers"
        x-exportParamName: "UidList"
      responses:
        "200":
          description: "Add ldap users successfully."
        "401":
          description: "User need to login first."
        "403":
          description: "Only admin has this authority."
        "404":
          description: "Failed import some users."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/LdapFailedImportUsers"
        "415":
          description: "The Media Type of the request is not supported, it has to\
            \ be \"application/json\""
  /usergroups:
    get:
      tags:
      - "Products"
      summary: "Get all user groups information"
      description: "Get all user groups information"
      parameters: []
      responses:
        "200":
          description: "Get user group successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserGroup"
        "401":
          description: "User need to log in first."
        "403":
          description: "User in session does not have permission to the user group."
        "500":
          description: "Unexpected internal errors."
    post:
      tags:
      - "Products"
      summary: "Create user group"
      description: "Create user group information"
      parameters:
      - in: "body"
        name: "usergroup"
        required: false
        schema:
          $ref: "#/definitions/UserGroup"
        x-exportParamName: "Usergroup"
      responses:
        "201":
          description: "User group created successfully."
          headers:
            Location:
              type: "string"
              description: "The URL of the created resource"
        "400":
          description: "Invalid LDAP group DN."
        "401":
          description: "User need to log in first."
        "403":
          description: "User in session does not have permission to the user group."
        "409":
          description: "A user group with same group name already exist, or an LDAP\
            \ user group with same DN already exist."
        "500":
          description: "Unexpected internal errors."
  /usergroups/{group_id}:
    get:
      tags:
      - "Products"
      summary: "Get user group information"
      description: "Get user group information"
      parameters:
      - name: "group_id"
        in: "path"
        description: "Group ID"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "GroupId"
      responses:
        "200":
          description: "User group get successfully."
          schema:
            $ref: "#/definitions/UserGroup"
        "400":
          description: "The user group id is invalid."
        "401":
          description: "User need to log in first."
        "403":
          description: "User in session does not have permission to the user group."
        "404":
          description: "User group does not exist."
        "500":
          description: "Unexpected internal errors."
    put:
      tags:
      - "Products"
      summary: "Update group information"
      description: "Update user group information"
      parameters:
      - name: "group_id"
        in: "path"
        description: "Group ID"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "GroupId"
      - in: "body"
        name: "usergroup"
        required: false
        schema:
          $ref: "#/definitions/UserGroup"
        x-exportParamName: "Usergroup"
      responses:
        "200":
          description: "User group updated successfully."
        "400":
          description: "The user group id is invalid."
        "401":
          description: "User need to log in first."
        "403":
          description: "Only admin has this authority."
        "404":
          description: "User group does not exist."
        "500":
          description: "Unexpected internal errors."
    delete:
      tags:
      - "Products"
      summary: "Delete user group"
      description: "Delete user group"
      parameters:
      - name: "group_id"
        in: "path"
        required: true
        type: "integer"
        x-exportParamName: "GroupId"
      responses:
        "200":
          description: "User group deleted successfully."
        "400":
          description: "The user group id is invalid."
        "401":
          description: "User need to log in first."
        "403":
          description: "Only admin has this authority."
        "500":
          description: "Unexpected internal errors."
  /system/gc:
    get:
      tags:
      - "Products"
      summary: "Get gc results."
      description: "This endpoint let user get latest ten gc results."
      parameters: []
      responses:
        "200":
          description: "Get gc results successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GCResult"
        "401":
          description: "User need to log in first."
        "403":
          description: "User does not have permission of admin role."
        "500":
          description: "Unexpected internal errors."
  /system/gc/{id}:
    get:
      tags:
      - "Products"
      summary: "Get gc status."
      description: "This endpoint let user get gc status filtered by specific ID."
      parameters:
      - name: "id"
        in: "path"
        description: "Relevant job ID"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "Get gc results successfully."
          schema:
            $ref: "#/definitions/GCResult"
        "401":
          description: "User need to log in first."
        "403":
          description: "User does not have permission of admin role."
        "500":
          description: "Unexpected internal errors."
  /system/gc/{id}/log:
    get:
      tags:
      - "Products"
      summary: "Get gc job log."
      description: "This endpoint let user get gc job logs filtered by specific ID."
      parameters:
      - name: "id"
        in: "path"
        description: "Relevant job ID"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "Get successfully."
          schema:
            type: "string"
        "400":
          description: "Illegal format of provided ID value."
        "401":
          description: "User need to log in first."
        "403":
          description: "User does not have permission of admin role."
        "404":
          description: "The specific gc ID's log does not exist."
        "500":
          description: "Unexpected internal errors."
  /system/gc/schedule:
    get:
      tags:
      - "Products"
      summary: "Get gc's schedule."
      description: "This endpoint is for get schedule of gc job."
      parameters: []
      responses:
        "200":
          description: "Get gc's schedule."
          schema:
            $ref: "#/definitions/AdminJobSchedule"
        "401":
          description: "User need to log in first."
        "403":
          description: "Only admin has this authority."
        "500":
          description: "Unexpected internal errors."
    post:
      tags:
      - "Products"
      summary: "Create a gc schedule."
      description: "This endpoint is for update gc schedule.\n"
      parameters:
      - in: "body"
        name: "schedule"
        description: "Updates of gc's schedule."
        required: true
        schema:
          $ref: "#/definitions/AdminJobSchedule"
        x-exportParamName: "Schedule"
      responses:
        "200":
          description: "GC schedule successfully."
        "400":
          description: "Invalid schedule type."
        "401":
          description: "User need to log in first."
        "403":
          description: "User does not have permission of admin role."
        "409":
          description: "There is a \"gc\" job in progress, so the request cannot be\
            \ served."
        "500":
          description: "Unexpected internal errors."
    put:
      tags:
      - "Products"
      summary: "Update gc's schedule."
      description: "This endpoint is for update gc schedule.\n"
      parameters:
      - in: "body"
        name: "schedule"
        description: "Updates of gc's schedule."
        required: true
        schema:
          $ref: "#/definitions/AdminJobSchedule"
        x-exportParamName: "Schedule"
      responses:
        "200":
          description: "Updated gc's schedule successfully."
        "400":
          description: "Invalid schedule type."
        "401":
          description: "User need to log in first."
        "403":
          description: "User does not have permission of admin role."
        "500":
          description: "Unexpected internal errors."
  /system/scanAll/schedule:
    get:
      tags:
      - "Products"
      summary: "Get scan_all's schedule."
      description: "This endpoint is for getting a schedule for the scan all job,\
        \ which scans all of images in Harbor."
      parameters: []
      responses:
        "200":
          description: "Get a schedule for the scan all job, which scans all of images\
            \ in Harbor."
          schema:
            $ref: "#/definitions/AdminJobSchedule"
        "401":
          description: "User need to log in first."
        "403":
          description: "Only admin has this authority."
        "500":
          description: "Unexpected internal errors."
    post:
      tags:
      - "Products"
      summary: "Create a schedule or a manual trigger for the scan all job."
      description: "This endpoint is for creating a schedule or a manual trigger for\
        \ the scan all job, which scans all of images in Harbor.\n"
      parameters:
      - in: "body"
        name: "schedule"
        description: "Create a schedule or a manual trigger for the scan all job."
        required: true
        schema:
          $ref: "#/definitions/AdminJobSchedule"
        x-exportParamName: "Schedule"
      responses:
        "200":
          description: "Updated scan_all's schedule successfully."
        "400":
          description: "Invalid schedule type."
        "401":
          description: "User need to log in first."
        "403":
          description: "User does not have permission of admin role."
        "409":
          description: "There is a \"scanall\" job in progress, so the request cannot\
            \ be served."
        "500":
          description: "Unexpected internal errors."
        "503":
          description: "Harbor is not deployed with scanners."
    put:
      tags:
      - "Products"
      summary: "Update scan all's schedule."
      description: "This endpoint is for updating the schedule of scan all job, which\
        \ scans all of images in Harbor.\n"
      parameters:
      - in: "body"
        name: "schedule"
        description: "Updates the schedule of scan all job, which scans all of images\
          \ in Harbor."
        required: true
        schema:
          $ref: "#/definitions/AdminJobSchedule"
        x-exportParamName: "Schedule"
      responses:
        "200":
          description: "Updated scan_all's schedule successfully."
        "400":
          description: "Invalid schedule type."
        "401":
          description: "User need to log in first."
        "403":
          description: "User does not have permission of admin role."
        "500":
          description: "Unexpected internal errors."
  /configurations:
    get:
      tags:
      - "Products"
      summary: "Get system configurations."
      description: "This endpoint is for retrieving system configurations that only\
        \ provides for admin user.\n"
      parameters: []
      responses:
        "200":
          description: "Get system configurations successfully. The response body\
            \ is a map."
          schema:
            $ref: "#/definitions/ConfigurationsResponse"
        "401":
          description: "User need to log in first.ß"
        "403":
          description: "User does not have permission of admin role."
        "500":
          description: "Unexpected internal errors."
    put:
      tags:
      - "Products"
      summary: "Modify system configurations."
      description: "This endpoint is for modifying system configurations that only\
        \ provides for admin user.\n"
      parameters:
      - in: "body"
        name: "configurations"
        description: "The configuration map can contain a subset of the attributes\
          \ of the schema, which are to be updated."
        required: true
        schema:
          $ref: "#/definitions/Configurations"
        x-exportParamName: "Configurations"
      responses:
        "200":
          description: "Modify system configurations successfully."
        "401":
          description: "User need to log in first."
        "403":
          description: "User does not have permission of admin role."
        "500":
          description: "Unexpected internal errors."
  /email/ping:
    post:
      tags:
      - "Products"
      summary: "Test connection and authentication with email server."
      description: "Test connection and authentication with email server.\n"
      parameters:
      - in: "body"
        name: "settings"
        description: "Email server settings, if some of the settings are not assigned,\
          \ they will be read from system configuration."
        required: false
        schema:
          $ref: "#/definitions/EmailServerSetting"
        x-exportParamName: "Settings"
      responses:
        "200":
          description: "Ping email server successfully."
        "400":
          description: "Inviald email server settings."
        "401":
          description: "User need to login first."
        "403":
          description: "Only admin has this authority."
        "415":
          description: "The Media Type of the request is not supported, it has to\
            \ be \"application/json\""
        "500":
          description: "Unexpected internal errors."
  /chartrepo/{repo}/charts/{name}/{version}/labels:
    get:
      tags:
      - "Products"
      - "Chart Repository"
      - "Label"
      summary: "Return the attahced labels of chart."
      description: "Return the attahced labels of the specified chart version."
      parameters:
      - name: "repo"
        in: "path"
        description: "The project name"
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "name"
        in: "path"
        description: "The chart name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "version"
        in: "path"
        description: "The chart version"
        required: true
        type: "string"
        x-exportParamName: "Version"
      responses:
        "200":
          $ref: "#/definitions/Labels"
        "401":
          $ref: "#/definitions/UnauthorizedChartAPIError"
        "403":
          $ref: "#/definitions/ForbiddenChartAPIError"
        "404":
          $ref: "#/definitions/NotFoundChartAPIError"
        "500":
          $ref: "#/definitions/InternalChartAPIError"
    post:
      tags:
      - "Products"
      - "Chart Repository"
      - "Label"
      summary: "Mark label to chart."
      description: "Mark label to the specified chart version."
      parameters:
      - name: "repo"
        in: "path"
        description: "The project name"
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "name"
        in: "path"
        description: "The chart name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "version"
        in: "path"
        description: "The chart version"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - in: "body"
        name: "label"
        description: "The label being marked to the chart version"
        required: true
        schema:
          $ref: "#/definitions/Label"
        x-exportParamName: "Label"
      responses:
        "200":
          description: "The label is successfully marked to the chart version."
        "400":
          $ref: "#/definitions/BadRequestFormatedError"
        "401":
          $ref: "#/definitions/UnauthorizedChartAPIError"
        "403":
          $ref: "#/definitions/ForbiddenChartAPIError"
        "404":
          $ref: "#/definitions/NotFoundChartAPIError"
        "409":
          $ref: "#/definitions/ConflictFormatedError"
        "500":
          $ref: "#/definitions/InternalChartAPIError"
  /chartrepo/{repo}/charts/{name}/{version}/labels/{id}:
    delete:
      tags:
      - "Products"
      - "Chart Repository"
      - "Label"
      summary: "Remove label from chart."
      description: "Remove label from the specified chart version."
      parameters:
      - name: "repo"
        in: "path"
        description: "The project name"
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "name"
        in: "path"
        description: "The chart name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "version"
        in: "path"
        description: "The chart version"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - name: "id"
        in: "path"
        description: "The label ID"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "The label is successfully unmarked from the chart version."
        "400":
          $ref: "#/definitions/BadRequestFormatedError"
        "401":
          $ref: "#/definitions/UnauthorizedChartAPIError"
        "403":
          $ref: "#/definitions/ForbiddenChartAPIError"
        "404":
          $ref: "#/definitions/NotFoundChartAPIError"
        "500":
          $ref: "#/definitions/InternalChartAPIError"
  /projects/{project_id}/robots:
    get:
      tags:
      - "Products"
      - "Robot Account"
      summary: "Get all robot accounts of specified project"
      description: "Get all robot accounts of specified project"
      parameters:
      - name: "page"
        in: "query"
        description: "The page number."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "page_size"
        in: "query"
        description: "The size of per page."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      - name: "project_id"
        in: "path"
        description: "Relevant project ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      responses:
        "200":
          description: "Get project robot accounts successfully."
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of available items"
            Link:
              type: "string"
              description: "Link to previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/RobotAccount"
        "400":
          description: "The project id is invalid."
        "401":
          description: "User need to log in first."
        "403":
          description: "User in session does not have permission to the project."
        "404":
          description: "Project ID does not exist."
        "500":
          description: "Unexpected internal errors."
    post:
      tags:
      - "Products"
      - "Robot Account"
      summary: "Create a robot account for project"
      description: "Create a robot account for project"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Relevant project ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - in: "body"
        name: "robot"
        description: "Request body of creating a robot account."
        required: true
        schema:
          $ref: "#/definitions/RobotAccountCreate"
        x-exportParamName: "Robot"
      responses:
        "201":
          description: "Project member created successfully."
          headers:
            Location:
              type: "string"
              description: "The URL of the created resource"
          schema:
            $ref: "#/definitions/RobotAccountPostRep"
        "400":
          description: "Project id is not valid."
        "401":
          description: "User need to log in first."
        "403":
          description: "User in session does not have permission to the project."
        "409":
          description: "An robot account with same name already exist in the project."
        "500":
          description: "Unexpected internal errors."
  /projects/{project_id}/robots/{robot_id}:
    get:
      tags:
      - "Products"
      - "Robot Account"
      summary: "Return the infor of the specified robot account."
      description: "Return the infor of the specified robot account."
      parameters:
      - name: "project_id"
        in: "path"
        description: "Relevant project ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - name: "robot_id"
        in: "path"
        description: "The ID of robot account."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "RobotId"
      responses:
        "200":
          description: "Robot account information."
          schema:
            $ref: "#/definitions/RobotAccount"
        "401":
          description: "User need to log in first."
        "403":
          description: "User in session does not have permission to the project."
        "404":
          description: "The robot account is not found."
        "500":
          description: "Unexpected internal errors."
    put:
      tags:
      - "Products"
      - "Robot Account"
      summary: "Update status of robot account."
      description: "Used to disable/enable a specified robot account."
      parameters:
      - name: "project_id"
        in: "path"
        description: "Relevant project ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - name: "robot_id"
        in: "path"
        description: "The ID of robot account."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "RobotId"
      - in: "body"
        name: "robot"
        description: "Request body of enable/disable a robot account."
        required: true
        schema:
          $ref: "#/definitions/RobotAccountUpdate"
        x-exportParamName: "Robot"
      responses:
        "200":
          description: "Robot account has been modified success."
        "500":
          description: "Unexpected internal errors."
    delete:
      tags:
      - "Products"
      - "Robot Account"
      summary: "Delete the specified robot account"
      description: "Delete the specified robot account"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Relevant project ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - name: "robot_id"
        in: "path"
        description: "The ID of robot account."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "RobotId"
      responses:
        "200":
          description: "The specified robot account is successfully deleted."
        "401":
          description: "User need to log in first."
        "403":
          description: "User in session does not have permission to the project."
        "404":
          description: "The robot account is not found."
        "500":
          description: "Unexpected internal errors."
  /system/oidc/ping:
    post:
      tags:
      - "Products"
      - "System"
      summary: "Test the OIDC endpoint."
      description: "Test the OIDC endpoint, the setting of the endpoint is provided\
        \ in the request.  This API can only be called by system admin."
      parameters:
      - in: "body"
        name: "endpoint"
        description: "Request body for OIDC endpoint to be tested."
        required: true
        schema:
          $ref: "#/definitions/endpoint"
        x-exportParamName: "Endpoint"
      responses:
        "200":
          description: "Ping succeeded.  The OIDC endpoint is valid."
        "400":
          description: "The ping failed"
        "401":
          description: "User need to log in first."
        "403":
          description: "User does not have permission to call this API"
  /system/CVEAllowlist:
    get:
      tags:
      - "Products"
      - "System"
      summary: "Get the system level allowlist of CVE."
      description: "Get the system level allowlist of CVE.  This API can be called\
        \ by all authenticated users."
      parameters: []
      responses:
        "200":
          description: "Successfully retrieved the CVE allowlist."
          schema:
            $ref: "#/definitions/CVEAllowlist"
        "401":
          description: "User is not authenticated."
        "500":
          description: "Unexpected internal errors."
    put:
      tags:
      - "Products"
      - "System"
      summary: "Update the system level allowlist of CVE."
      description: "This API overwrites the system level allowlist of CVE with the\
        \ list in request body.  Only system Admin has permission to call this API."
      parameters:
      - in: "body"
        name: "allowlist"
        description: "The allowlist with new content"
        required: false
        schema:
          $ref: "#/definitions/CVEAllowlist"
        x-exportParamName: "Allowlist"
      responses:
        "200":
          description: "Successfully updated the CVE allowlist."
        "401":
          description: "User is not authenticated."
        "403":
          description: "User does not have permission to call this API."
        "500":
          description: "Unexpected internal errors."
  /quotas:
    get:
      tags:
      - "Products"
      summary: "List quotas"
      description: "List quotas"
      parameters:
      - name: "reference"
        in: "query"
        description: "The reference type of quota."
        required: false
        type: "string"
        x-exportParamName: "Reference"
        x-optionalDataType: "String"
      - name: "reference_id"
        in: "query"
        description: "The reference id of quota."
        required: false
        type: "string"
        x-exportParamName: "ReferenceId"
        x-optionalDataType: "String"
      - name: "sort"
        in: "query"
        description: "Sort method, valid values include:\n'hard.resource_name', '-hard.resource_name',\
          \ 'used.resource_name', '-used.resource_name'.\nHere '-' stands for descending\
          \ order, resource_name should be the real resource name of the quota.\n"
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "The page number, default is 1."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "page_size"
        in: "query"
        description: "The size of per page, default is 10, maximum is 100."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Successfully retrieved the quotas."
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of access logs"
            Link:
              type: "string"
              description: "Link refers to the previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Quota"
        "401":
          description: "User is not authenticated."
        "403":
          description: "User does not have permission to call this API."
        "500":
          description: "Unexpected internal errors."
  /quotas/{id}:
    get:
      tags:
      - "Products"
      - "Quota"
      summary: "Get the specified quota"
      description: "Get the specified quota"
      parameters:
      - name: "id"
        in: "path"
        description: "Quota ID"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "Successfully retrieved the quota."
          schema:
            $ref: "#/definitions/Quota"
        "401":
          description: "User need to log in first."
        "403":
          description: "User does not have permission to call this API"
        "404":
          description: "Quota does not exist."
        "500":
          description: "Unexpected internal errors."
    put:
      tags:
      - "Products"
      - "Quota"
      summary: "Update the specified quota"
      description: "Update hard limits of the specified quota"
      parameters:
      - name: "id"
        in: "path"
        description: "Quota ID"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      - in: "body"
        name: "hard"
        description: "The new hard limits for the quota"
        required: true
        schema:
          $ref: "#/definitions/QuotaUpdateReq"
        x-exportParamName: "Hard"
      responses:
        "200":
          description: "Updated quota hard limits successfully."
        "400":
          description: "Illegal format of quota update request."
        "401":
          description: "User need to log in first."
        "403":
          description: "User does not have permission to the quota."
        "404":
          description: "Quota ID does not exist."
        "500":
          description: "Unexpected internal errors."
  /projects/{project_id}/webhook/policies:
    get:
      tags:
      - "Products"
      summary: "List project webhook policies."
      description: "This endpoint returns webhook policies of a project.\n"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Relevant project ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      responses:
        "200":
          description: "List project webhook policies successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/WebhookPolicy"
        "400":
          description: "Illegal format of provided ID value."
        "401":
          description: "User need to log in first."
        "403":
          description: "User have no permission to list webhook policies of the project."
        "500":
          description: "Unexpected internal errors."
    post:
      tags:
      - "Products"
      summary: "Create project webhook policy."
      description: "This endpoint create a webhook policy if the project does not\
        \ have one.\n"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Relevant project ID"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - in: "body"
        name: "policy"
        description: "Properties \"targets\" and \"event_types\" needed."
        required: true
        schema:
          $ref: "#/definitions/WebhookPolicy"
        x-exportParamName: "Policy"
      responses:
        "201":
          description: "Project webhook policy create successfully."
          headers:
            Location:
              type: "string"
              description: "The URL of the created resource"
        "400":
          description: "Illegal format of provided ID value."
        "401":
          description: "User need to log in first."
        "403":
          description: "User have no permission to create webhook policy of the project."
        "500":
          description: "Unexpected internal errors."
  /projects/{project_id}/webhook/policies/{policy_id}:
    get:
      tags:
      - "Products"
      summary: "Get project webhook policy"
      description: "This endpoint returns specified webhook policy of a project.\n"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Relevant project ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - name: "policy_id"
        in: "path"
        description: "The id of webhook policy."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "PolicyId"
      responses:
        "200":
          description: "Get webhook policy successfully."
          schema:
            $ref: "#/definitions/WebhookPolicy"
        "400":
          description: "Illegal format of provided ID value."
        "401":
          description: "User need to log in first."
        "403":
          description: "User have no permission to get webhook policy of the project."
        "404":
          description: "Webhook policy ID does not exist."
        "500":
          description: "Internal server errors."
    put:
      tags:
      - "Products"
      summary: "Update webhook policy of a project."
      description: "This endpoint is aimed to update the webhook policy of a project.\n"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Relevant project ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - name: "policy_id"
        in: "path"
        description: "The id of webhook policy."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "PolicyId"
      - in: "body"
        name: "policy"
        description: "All properties needed except \"id\", \"project_id\", \"creation_time\"\
          , \"update_time\"."
        required: true
        schema:
          $ref: "#/definitions/WebhookPolicy"
        x-exportParamName: "Policy"
      responses:
        "200":
          description: "Update webhook policy successfully."
        "400":
          description: "Illegal format of provided ID value."
        "401":
          description: "User need to log in first."
        "403":
          description: "User have no permission to update webhook policy of the project."
        "404":
          description: "Webhook policy ID does not exist."
        "500":
          description: "Internal server errors."
    delete:
      tags:
      - "Products"
      summary: "Delete webhook policy of a project"
      description: "This endpoint is aimed to delete webhookpolicy of a project.\n"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Relevant project ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - name: "policy_id"
        in: "path"
        description: "The id of webhook policy."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "PolicyId"
      responses:
        "200":
          description: "Delete webhook policy successfully."
        "400":
          description: "Illegal format of provided ID value."
        "401":
          description: "User need to log in first."
        "403":
          description: "User have no permission to delete webhook policy of the project."
        "404":
          description: "Webhook policy ID does not exist."
        "500":
          description: "Internal server errors."
  /projects/{project_id}/webhook/policies/test:
    post:
      tags:
      - "Products"
      summary: "Test project webhook connection"
      description: "This endpoint tests webhook connection of a project.\n"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Relevant project ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - in: "body"
        name: "policy"
        description: "Only property \"targets\" needed."
        required: true
        schema:
          $ref: "#/definitions/WebhookPolicy"
        x-exportParamName: "Policy"
      responses:
        "200":
          description: "Test webhook connection successfully."
        "400":
          description: "Illegal format of provided ID value."
        "401":
          description: "User need to log in first."
        "403":
          description: "User have no permission to get webhook policy of the project."
        "500":
          description: "Internal server errors."
  /projects/{project_id}/webhook/lasttrigger:
    get:
      tags:
      - "Products"
      summary: "Get project webhook policy last trigger info"
      description: "This endpoint returns last trigger information of project webhook\
        \ policy.\n"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Relevant project ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      responses:
        "200":
          description: "Test webhook connection successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/WebhookLastTrigger"
        "400":
          description: "Illegal format of provided ID value."
        "401":
          description: "User need to log in first."
        "403":
          description: "User have no permission to get webhook policy of the project."
        "500":
          description: "Internal server errors."
  /projects/{project_id}/webhook/jobs:
    get:
      tags:
      - "Products"
      summary: "List project webhook jobs"
      description: "This endpoint returns webhook jobs of a project.\n"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Relevant project ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - name: "policy_id"
        in: "query"
        description: "The policy ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "PolicyId"
      responses:
        "200":
          description: "List project webhook jobs successfully."
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of available items"
            Link:
              type: "string"
              description: "Link to previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/WebhookJob"
        "400":
          description: "Illegal format of provided ID value."
        "401":
          description: "User need to log in first."
        "403":
          description: "User have no permission to list webhook jobs of the project."
        "500":
          description: "Unexpected internal errors."
  /projects/{project_id}/webhook/events:
    get:
      tags:
      - "Products"
      summary: "Get supported event types and notify types."
      description: "Get supportted event types and notify types."
      parameters:
      - name: "project_id"
        in: "path"
        description: "Relevant project ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SupportedWebhookEventTypes"
        "401":
          description: "User need to log in first."
        "403":
          description: "User have no permission to list webhook jobs of the project."
        "500":
          description: "Unexpected internal errors."
  /projects/{project_id}/immutabletagrules:
    get:
      tags:
      - "Products"
      summary: "List all immutable tag rules of current project"
      description: "This endpoint returns the immutable tag rules of a project\n"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Relevant project ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      responses:
        "200":
          description: "List project immutable tag rules successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ImmutableTagRule"
        "400":
          description: "Illegal format of provided ID value."
        "401":
          description: "User need to log in first."
        "403":
          description: "User have no permission to list immutable tag rules of the\
            \ project."
        "500":
          description: "Unexpected internal errors."
    post:
      tags:
      - "Products"
      summary: "Add an immutable tag rule to current project"
      description: "This endpoint add an immutable tag rule to the project\n"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Relevant project ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - in: "body"
        name: "immutabletagrule"
        required: false
        schema:
          $ref: "#/definitions/ImmutableTagRule"
        x-exportParamName: "Immutabletagrule"
      responses:
        "200":
          description: "Add the immutable tag rule successfully."
        "400":
          description: "Illegal format of provided ID value."
        "401":
          description: "User need to log in first."
        "403":
          description: "User have no permission to get immutable tag rule of the project."
        "500":
          description: "Internal server errors."
  /projects/{project_id}/immutabletagrules/{id}:
    put:
      tags:
      - "Products"
      summary: "Update the immutable tag rule or enable or disable the rule"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Relevant project ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - name: "id"
        in: "path"
        description: "Immutable tag rule ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      - in: "body"
        name: "immutabletagrule"
        required: false
        schema:
          $ref: "#/definitions/ImmutableTagRule"
        x-exportParamName: "Immutabletagrule"
      responses:
        "200":
          description: "Update the immutable tag rule successfully."
        "400":
          description: "Illegal format of provided ID value."
        "401":
          description: "User need to log in first."
        "403":
          description: "User have no permission to update the immutable tag rule of\
            \ the project."
        "500":
          description: "Internal server errors."
    delete:
      tags:
      - "Products"
      summary: "Delete the immutable tag rule."
      parameters:
      - name: "project_id"
        in: "path"
        description: "Relevant project ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - name: "id"
        in: "path"
        description: "Immutable tag rule ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "Delete the immutable tag rule successfully."
        "400":
          description: "Illegal format of provided ID value."
        "401":
          description: "User need to log in first."
        "403":
          description: "User have no permission to delete immutable tags of the project."
        "500":
          description: "Internal server errors."
  /retentions/metadatas:
    get:
      tags:
      - "Products"
      - "Retention"
      summary: "Get Retention Metadatas"
      description: "Get Retention Metadatas."
      parameters: []
      responses:
        "200":
          description: "Get Retention Metadatas successfully."
          schema:
            $ref: "#/definitions/RetentionMetadata"
  /retentions:
    post:
      tags:
      - "Products"
      - "Retention"
      summary: "Create Retention Policy"
      description: "Create Retention Policy, you can reference metadatas API for the\
        \ policy model.\nYou can check project metadatas to find whether a retention\
        \ policy is already binded.\nThis method should only be called when no retention\
        \ policy binded to project yet.\n"
      parameters:
      - in: "body"
        name: "policy"
        description: "Create Retention Policy successfully."
        required: true
        schema:
          $ref: "#/definitions/RetentionPolicy"
        x-exportParamName: "Policy"
      responses:
        "201":
          description: "Project created successfully."
          headers:
            Location:
              type: "string"
              description: "The URL of the created resource"
        "400":
          description: "Illegal format of provided ID value."
        "401":
          description: "User need to log in first."
        "403":
          description: "User have no permission."
        "500":
          description: "Unexpected internal errors."
  /retentions/{id}:
    get:
      tags:
      - "Products"
      - "Retention"
      summary: "Get Retention Policy"
      description: "Get Retention Policy."
      parameters:
      - name: "id"
        in: "path"
        description: "Retention ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "Get Retention Policy successfully."
          schema:
            $ref: "#/definitions/RetentionPolicy"
        "401":
          description: "User need to log in first."
        "403":
          description: "User have no permission."
        "500":
          description: "Unexpected internal errors."
    put:
      tags:
      - "Products"
      summary: "Update Retention Policy"
      description: "Update Retention Policy, you can reference metadatas API for the\
        \ policy model.\nYou can check project metadatas to find whether a retention\
        \ policy is already binded.\nThis method should only be called when retention\
        \ policy has already binded to project.\n"
      parameters:
      - name: "id"
        in: "path"
        description: "Retention ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      - in: "body"
        name: "policy"
        required: true
        schema:
          $ref: "#/definitions/RetentionPolicy"
        x-exportParamName: "Policy"
      responses:
        "200":
          description: "Update Retention Policy successfully."
        "401":
          description: "User need to log in first."
        "403":
          description: "User have no permission."
        "500":
          description: "Unexpected internal errors."
  /retentions/{id}/executions:
    get:
      tags:
      - "Products"
      - "Retention"
      summary: "Get a Retention job"
      description: "Get a Retention job, job status may be delayed before job service\
        \ schedule it up."
      parameters:
      - name: "id"
        in: "path"
        description: "Retention ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      - name: "page"
        in: "query"
        description: "The page number."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "page_size"
        in: "query"
        description: "The size of per page."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Get a Retention job successfully."
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of available items"
            Link:
              type: "string"
              description: "Link to previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/RetentionExecution"
        "401":
          description: "User need to log in first."
        "403":
          description: "User have no permission."
        "500":
          description: "Unexpected internal errors."
    post:
      tags:
      - "Products"
      - "Retention"
      summary: "Trigger a Retention job"
      description: "Trigger a Retention job, if dry_run is True, nothing would be\
        \ deleted actually."
      parameters:
      - name: "id"
        in: "path"
        description: "Retention ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      - in: "body"
        name: "action"
        required: true
        schema:
          $ref: "#/definitions/action"
        x-exportParamName: "Action"
      responses:
        "200":
          description: "Trigger a Retention job successfully."
        "401":
          description: "User need to log in first."
        "403":
          description: "User have no permission."
        "500":
          description: "Unexpected internal errors."
  /retentions/{id}/executions/{eid}:
    patch:
      tags:
      - "Products"
      - "Retention"
      summary: "Stop a Retention job"
      description: "Stop a Retention job, only support \"stop\" action now."
      parameters:
      - name: "id"
        in: "path"
        description: "Retention ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      - name: "eid"
        in: "path"
        description: "Retention execution ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Eid"
      - in: "body"
        name: "action"
        description: "The action, only support \"stop\" now."
        required: true
        schema:
          $ref: "#/definitions/action_1"
        x-exportParamName: "Action"
      responses:
        "200":
          description: "Stop a Retention job successfully."
        "401":
          description: "User need to log in first."
        "403":
          description: "User have no permission."
        "500":
          description: "Unexpected internal errors."
  /retentions/{id}/executions/{eid}/tasks:
    get:
      tags:
      - "Products"
      - "Retention"
      summary: "Get Retention job tasks"
      description: "Get Retention job tasks, each repository as a task."
      parameters:
      - name: "id"
        in: "path"
        description: "Retention ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      - name: "eid"
        in: "path"
        description: "Retention execution ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Eid"
      - name: "page"
        in: "query"
        description: "The page number."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "page_size"
        in: "query"
        description: "The size of per page."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Get Retention job tasks successfully."
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of available items"
            Link:
              type: "string"
              description: "Link to previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/RetentionExecutionTask"
        "401":
          description: "User need to log in first."
        "403":
          description: "User have no permission."
        "500":
          description: "Unexpected internal errors."
  /retentions/{id}/executions/{eid}/tasks/{tid}:
    get:
      tags:
      - "Products"
      - "Retention"
      summary: "Get Retention job task log"
      description: "Get Retention job task log, tags ratain or deletion detail will\
        \ be shown in a table."
      parameters:
      - name: "id"
        in: "path"
        description: "Retention ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      - name: "eid"
        in: "path"
        description: "Retention execution ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Eid"
      - name: "tid"
        in: "path"
        description: "Retention execution ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Tid"
      responses:
        "200":
          description: "Get Retention job task log successfully."
          schema:
            type: "string"
        "401":
          description: "User need to log in first."
        "403":
          description: "User have no permission."
        "500":
          description: "Unexpected internal errors."
  /scanners:
    get:
      tags:
      - "Products"
      - "Scanners"
      summary: "List scanner registrations"
      description: "Returns a list of currently configured scanner registrations.\n"
      parameters:
      - name: "page"
        in: "query"
        description: "The page number."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "page_size"
        in: "query"
        description: "The size of per page."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "A list of scanner registrations."
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of available items"
            Link:
              type: "string"
              description: "Link to previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ScannerRegistration"
        "400":
          description: "Bad query paramters"
        "401":
          description: "Unauthorized request"
        "403":
          description: "Request is not allowed, system role required"
        "500":
          description: "Internal server error happened"
    post:
      tags:
      - "Scanners"
      summary: "Create a scanner registration"
      description: "Creats a new scanner registration with the given data.\n"
      parameters:
      - in: "body"
        name: "registration"
        description: "A scanner registration to be created."
        required: true
        schema:
          $ref: "#/definitions/ScannerRegistrationReq"
        x-exportParamName: "Registration"
      responses:
        "201":
          description: "Created successfully"
          headers:
            Location:
              type: "string"
              description: "The URL of the created resource"
        "400":
          description: "Bad registration request"
        "401":
          description: "Unauthorized request"
        "403":
          description: "Request is not allowed, system role required"
        "500":
          description: "Internal server error happened"
  /scanners/ping:
    post:
      tags:
      - "Products"
      - "Scanners"
      summary: "Tests scanner registration settings"
      description: "Pings scanner adapter to test endpoint URL and authorization settings.\n"
      parameters:
      - in: "body"
        name: "settings"
        description: "A scanner registration settings to be tested."
        required: true
        schema:
          $ref: "#/definitions/ScannerRegistrationSettings"
        x-exportParamName: "Settings"
      responses:
        "200":
          description: "Test succeeded"
        "400":
          description: "Bad registration settings"
        "401":
          description: "Unauthorized request"
        "403":
          description: "Request is not allowed, system role required"
        "500":
          description: "Internal server error happened"
  /scanners/{registration_id}:
    get:
      tags:
      - "Products"
      - "Scanners"
      summary: "Get a scanner registration details"
      description: "Retruns the details of the specified scanner registration.\n"
      parameters:
      - name: "registration_id"
        in: "path"
        description: "The scanner registration identifer."
        required: true
        type: "string"
        x-exportParamName: "RegistrationId"
      responses:
        "200":
          description: "The details of the scanner registration."
          schema:
            $ref: "#/definitions/ScannerRegistration"
        "401":
          description: "Unauthorized request"
        "403":
          description: "Request is not allowed, system role required"
        "404":
          description: "The requested object is not found"
        "500":
          description: "Internal server error happened"
    put:
      tags:
      - "Scanners"
      summary: "Update a scanner registration"
      description: "Updates the specified scanner registration.\n"
      parameters:
      - name: "registration_id"
        in: "path"
        description: "The scanner registration identifier."
        required: true
        type: "string"
        x-exportParamName: "RegistrationId"
      - in: "body"
        name: "registration"
        description: "A scanner registraiton to be updated."
        required: true
        schema:
          $ref: "#/definitions/ScannerRegistrationReq"
        x-exportParamName: "Registration"
      responses:
        "200":
          description: "Updated successfully"
        "401":
          description: "Unauthorized request"
        "403":
          description: "Request is not allowed, system role required"
        "404":
          description: "The requested object is not found"
        "500":
          description: "Internal server error happened"
    delete:
      tags:
      - "Scanners"
      summary: "Delete a scanner registration"
      description: "Deletes the specified scanner registration.\n"
      parameters:
      - name: "registration_id"
        in: "path"
        description: "The scanner registration identifier."
        required: true
        type: "string"
        x-exportParamName: "RegistrationId"
      responses:
        "200":
          description: "Deleted successfully and return the deleted registration"
          schema:
            $ref: "#/definitions/ScannerRegistration"
        "401":
          description: "Unauthorized request"
        "403":
          description: "Request is not allowed, system role required or registration\
            \ is immutable"
        "404":
          description: "The requested object is not found"
        "500":
          description: "Internal server error happened"
    patch:
      tags:
      - "Scanners"
      summary: "Set system default scanner registration"
      description: "Set the specified scanner registration as the system default one.\n"
      parameters:
      - name: "registration_id"
        in: "path"
        description: "The scanner registration identifier."
        required: true
        type: "string"
        x-exportParamName: "RegistrationId"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/IsDefault"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Successfully set the specified scanner registration as system\
            \ default"
        "401":
          description: "Unauthorized request"
        "403":
          description: "Request is not allowed"
        "500":
          description: "Internal server error happened"
  /scanners/{registration_id}/metadata:
    get:
      tags:
      - "Products"
      - "Scanners"
      summary: "Get the metadata of the specified scanner registration"
      description: "Get the metadata of the specified scanner registration, including\
        \ the capabilities and customzied properties.\n"
      parameters:
      - name: "registration_id"
        in: "path"
        description: "The scanner registration identifier."
        required: true
        type: "string"
        x-exportParamName: "RegistrationId"
      responses:
        "200":
          description: "The metadata of the specified scanner adapter"
          schema:
            $ref: "#/definitions/ScannerAdapterMetadata"
        "401":
          description: "Unauthorized request"
        "403":
          description: "Request is not allowed"
        "500":
          description: "Internal server error happened"
  /projects/{project_id}/scanner:
    get:
      tags:
      - "Products"
      - "Scanners"
      summary: "Get project level scanner"
      description: "Get the scanner registration of the specified project. If no scanner\
        \ registration is configured for the specified project, the system default\
        \ scanner registration will be returned."
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project identifier."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      responses:
        "200":
          description: "The details of the scanner registration."
          schema:
            $ref: "#/definitions/ScannerRegistration"
        "400":
          description: "Bad project ID"
        "401":
          description: "Unauthorized request"
        "403":
          description: "Request is not allowed"
        "404":
          description: "The requested object is not found"
        "500":
          description: "Internal server error happened"
    put:
      tags:
      - "Scanners"
      summary: "Configure scanner for the specified project"
      description: "Set one of the system configured scanner registration as the indepndent\
        \ scanner of the specified project."
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project identifier."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - in: "body"
        name: "payload"
        required: true
        schema:
          $ref: "#/definitions/ProjectScanner"
        x-exportParamName: "Payload"
      responses:
        "200":
          description: "Successfully set the project level scanner"
        "400":
          description: "Bad project ID"
        "401":
          description: "Unauthorized request"
        "403":
          description: "Request is not allowed"
        "404":
          description: "The requested object is not found"
        "500":
          description: "Internal server error happened"
  /projects/{project_id}/scanner/candidates:
    get:
      tags:
      - "Products"
      - "Scanners"
      summary: "Get scanner registration candidates for configurating project level\
        \ scanner"
      description: "Retrieve the system configured scanner registrations as candidates\
        \ of setting project level scanner.\n"
      parameters:
      - name: "page"
        in: "query"
        description: "The page number."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "page_size"
        in: "query"
        description: "The size of per page."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      - name: "project_id"
        in: "path"
        description: "The project identifier."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      responses:
        "200":
          description: "A list of scanner registrations."
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of available items"
            Link:
              type: "string"
              description: "Link to previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ScannerRegistration"
        "400":
          description: "Bad project ID or query parameters"
        "401":
          description: "Unauthorized request"
        "403":
          description: "Request is not allowed"
        "500":
          description: "Internal server error happened"
  /scans/all/metrics:
    get:
      tags:
      - "Products"
      - "Scan"
      summary: "Get the metrics of the latest scan all process"
      description: "Get the metrics of the latest scan all process"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Stats"
        "401":
          description: "Unauthorized request"
        "403":
          description: "Request is not allowed"
        "500":
          description: "Internal server error happened"
  /scans/schedule/metrics:
    get:
      tags:
      - "Products"
      - "Scan"
      summary: "Get the metrics of the latest scheduled scan all process"
      description: "Get the metrics of the latest scheduled scan all process"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Stats"
        "401":
          description: "Unauthorized request"
        "403":
          description: "Request is not allowed"
        "500":
          description: "Internal server error happened"
securityDefinitions:
  basicAuth:
    type: "basic"
definitions:
  Search:
    type: "object"
    properties:
      project:
        type: "array"
        description: "Search results of the projects that matched the filter keywords."
        items:
          $ref: "#/definitions/Project"
      repository:
        type: "array"
        description: "Search results of the repositories that matched the filter keywords."
        items:
          $ref: "#/definitions/SearchRepository"
      chart:
        type: "array"
        description: "Search results of the charts that macthed the filter keywords."
        items:
          $ref: "#/definitions/SearchResult"
    example:
      project:
      - creation_time: "creation_time"
        togglable: true
        metadata:
          severity: "severity"
          prevent_vul: "prevent_vul"
          reuse_sys_cve_allowlist: "reuse_sys_cve_allowlist"
          public: "public"
          auto_scan: "auto_scan"
          enable_content_trust: "enable_content_trust"
        owner_name: "owner_name"
        owner_id: 6
        repo_count: 2
        registry_id: 1
        update_time: "update_time"
        current_user_role_id: 5
        deleted: true
        project_id: 0
        name: "name"
        current_user_role_ids:
        - 5
        - 5
        cve_allowlist:
          expires_at: 2
          project_id: 3
          id: 9
          items:
          - cve_id: "cve_id"
          - cve_id: "cve_id"
        chart_count: 7
      - creation_time: "creation_time"
        togglable: true
        metadata:
          severity: "severity"
          prevent_vul: "prevent_vul"
          reuse_sys_cve_allowlist: "reuse_sys_cve_allowlist"
          public: "public"
          auto_scan: "auto_scan"
          enable_content_trust: "enable_content_trust"
        owner_name: "owner_name"
        owner_id: 6
        repo_count: 2
        registry_id: 1
        update_time: "update_time"
        current_user_role_id: 5
        deleted: true
        project_id: 0
        name: "name"
        current_user_role_ids:
        - 5
        - 5
        cve_allowlist:
          expires_at: 2
          project_id: 3
          id: 9
          items:
          - cve_id: "cve_id"
          - cve_id: "cve_id"
        chart_count: 7
      repository:
      - project_id: 4
        artifact_count: 1
        project_name: "project_name"
        repository_name: "repository_name"
        pull_count: 7
        project_public: true
      - project_id: 4
        artifact_count: 1
        project_name: "project_name"
        repository_name: "repository_name"
        pull_count: 7
        project_public: true
      chart:
      - score: 1
        name: "name"
        chart: ""
      - score: 1
        name: "name"
        chart: ""
  SearchRepository:
    type: "object"
    properties:
      project_id:
        type: "integer"
        description: "The ID of the project that the repository belongs to"
      project_name:
        type: "string"
        description: "The name of the project that the repository belongs to"
      project_public:
        type: "boolean"
        description: "The flag to indicate the publicity of the project that the repository\
          \ belongs to (1 is public, 0 is not)"
      repository_name:
        type: "string"
        description: "The name of the repository"
      pull_count:
        type: "integer"
        description: "The count how many times the repository is pulled"
      artifact_count:
        type: "integer"
        description: "The count of artifacts in the repository"
    example:
      project_id: 4
      artifact_count: 1
      project_name: "project_name"
      repository_name: "repository_name"
      pull_count: 7
      project_public: true
  ProjectReq:
    type: "object"
    properties:
      project_name:
        type: "string"
        description: "The name of the project."
      metadata:
        description: "The metadata of the project."
        $ref: "#/definitions/ProjectMetadata"
      cve_allowlist:
        description: "The CVE allowlist of the project."
        $ref: "#/definitions/CVEAllowlist"
      count_limit:
        type: "integer"
        format: "int64"
        description: "The count quota of the project."
      storage_limit:
        type: "integer"
        format: "int64"
        description: "The storage quota of the project."
      registry_id:
        type: "integer"
        format: "int64"
        description: "The ID of referenced registry when creating the proxy cache\
          \ project"
  Project:
    type: "object"
    properties:
      project_id:
        type: "integer"
        format: "int32"
        description: "Project ID"
      owner_id:
        type: "integer"
        format: "int32"
        description: "The owner ID of the project always means the creator of the\
          \ project."
      name:
        type: "string"
        description: "The name of the project."
      registry_id:
        type: "integer"
        format: "int64"
        description: "The ID of referenced registry when the project is a proxy cache\
          \ project."
      creation_time:
        type: "string"
        description: "The creation time of the project."
      update_time:
        type: "string"
        description: "The update time of the project."
      deleted:
        type: "boolean"
        description: "A deletion mark of the project."
      owner_name:
        type: "string"
        description: "The owner name of the project."
      togglable:
        type: "boolean"
        description: "Correspond to the UI about whether the project's publicity is\
          \  updatable (for UI)"
      current_user_role_id:
        type: "integer"
        description: "The role ID with highest permission of the current user who\
          \ triggered the API (for UI).  This attribute is deprecated and will be\
          \ removed in future versions."
      current_user_role_ids:
        type: "array"
        description: "The list of role ID of the current user who triggered the API\
          \ (for UI)"
        items:
          type: "integer"
          format: "int32"
      repo_count:
        type: "integer"
        description: "The number of the repositories under this project."
      chart_count:
        type: "integer"
        description: "The total number of charts under this project."
      metadata:
        description: "The metadata of the project."
        $ref: "#/definitions/ProjectMetadata"
      cve_allowlist:
        description: "The CVE allowlist of this project."
        $ref: "#/definitions/CVEAllowlist"
    example:
      creation_time: "creation_time"
      togglable: true
      metadata:
        severity: "severity"
        prevent_vul: "prevent_vul"
        reuse_sys_cve_allowlist: "reuse_sys_cve_allowlist"
        public: "public"
        auto_scan: "auto_scan"
        enable_content_trust: "enable_content_trust"
      owner_name: "owner_name"
      owner_id: 6
      repo_count: 2
      registry_id: 1
      update_time: "update_time"
      current_user_role_id: 5
      deleted: true
      project_id: 0
      name: "name"
      current_user_role_ids:
      - 5
      - 5
      cve_allowlist:
        expires_at: 2
        project_id: 3
        id: 9
        items:
        - cve_id: "cve_id"
        - cve_id: "cve_id"
      chart_count: 7
  ProjectMetadata:
    type: "object"
    properties:
      public:
        type: "string"
        description: "The public status of the project. The valid values are \"true\"\
          , \"false\"."
      enable_content_trust:
        type: "string"
        description: "Whether content trust is enabled or not. If it is enabled, user\
          \ can't pull unsigned images from this project. The valid values are \"\
          true\", \"false\"."
      prevent_vul:
        type: "string"
        description: "Whether prevent the vulnerable images from running. The valid\
          \ values are \"true\", \"false\"."
      severity:
        type: "string"
        description: "If the vulnerability is high than severity defined here, the\
          \ images can't be pulled. The valid values are \"none\", \"low\", \"medium\"\
          , \"high\", \"critical\"."
      auto_scan:
        type: "string"
        description: "Whether scan images automatically when pushing. The valid values\
          \ are \"true\", \"false\"."
      reuse_sys_cve_allowlist:
        type: "string"
        description: "Whether this project reuse the system level CVE allowlist as\
          \ the allowlist of its own.  The valid values are \"true\", \"false\". If\
          \ it is set to \"true\" the actual allowlist associate with this project,\
          \ if any, will be ignored."
    example:
      severity: "severity"
      prevent_vul: "prevent_vul"
      reuse_sys_cve_allowlist: "reuse_sys_cve_allowlist"
      public: "public"
      auto_scan: "auto_scan"
      enable_content_trust: "enable_content_trust"
  ProjectSummary:
    type: "object"
    properties:
      repo_count:
        type: "integer"
        description: "The number of the repositories under this project."
      chart_count:
        type: "integer"
        description: "The total number of charts under this project."
      project_admin_count:
        type: "integer"
        description: "The total number of project admin members."
      maintainer_count:
        type: "integer"
        description: "The total number of maintainer members."
      developer_count:
        type: "integer"
        description: "The total number of developer members."
      guest_count:
        type: "integer"
        description: "The total number of guest members."
      quota:
        $ref: "#/definitions/ProjectSummary_quota"
      registry:
        $ref: "#/definitions/Registry"
  User:
    type: "object"
    properties:
      user_id:
        type: "integer"
        format: "int"
        description: "The ID of the user."
      username:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      realname:
        type: "string"
      comment:
        type: "string"
      deleted:
        type: "boolean"
      role_name:
        type: "string"
      role_id:
        type: "integer"
        format: "int"
      sysadmin_flag:
        type: "boolean"
      admin_role_in_auth:
        type: "boolean"
        description: "indicate the admin privilege is grant by authenticator (LDAP),\
          \ is always false unless it is the current login user"
      reset_uuid:
        type: "string"
      Salt:
        type: "string"
      creation_time:
        type: "string"
      update_time:
        type: "string"
    example:
      creation_time: "creation_time"
      sysadmin_flag: true
      admin_role_in_auth: true
      realname: "realname"
      role_name: "role_name"
      Salt: "Salt"
      password: "password"
      update_time: "update_time"
      deleted: true
      user_id: 0
      role_id: 6
      comment: "comment"
      email: "email"
      username: "username"
      reset_uuid: "reset_uuid"
  UserSearch:
    type: "object"
    properties:
      user_id:
        type: "integer"
        format: "int"
        description: "The ID of the user."
      username:
        type: "string"
    example:
      user_id: 0
      username: "username"
  Password:
    type: "object"
    properties:
      old_password:
        type: "string"
        description: "The user's existing password."
      new_password:
        type: "string"
        description: "New password for marking as to be updated."
    example:
      old_password: "old_password"
      new_password: "new_password"
  Role:
    type: "object"
    properties:
      role_id:
        type: "integer"
        format: "int32"
        description: "ID in table."
      role_code:
        type: "string"
        description: "Description of permissions for the role."
      role_name:
        type: "string"
        description: "Name the the role."
      role_mask:
        type: "string"
  RoleParam:
    type: "object"
    properties:
      roles:
        type: "array"
        description: "Role ID for updating project role member."
        items:
          type: "integer"
          format: "int32"
      username:
        type: "string"
        description: "Username relevant to a project role member."
  StatisticMap:
    type: "object"
    properties:
      private_project_count:
        type: "integer"
        format: "int32"
        description: "The count of the private projects which the user is a member\
          \ of."
      private_repo_count:
        type: "integer"
        format: "int32"
        description: "The count of the private repositories belonging to the projects\
          \ which the user is a member of."
      public_project_count:
        type: "integer"
        format: "int32"
        description: "The count of the public projects."
      public_repo_count:
        type: "integer"
        format: "int32"
        description: "The count of the public repositories belonging to the public\
          \ projects which the user is a member of."
      total_project_count:
        type: "integer"
        format: "int32"
        description: "The count of the total projects, only be seen when the is admin."
      total_repo_count:
        type: "integer"
        format: "int32"
        description: "The count of the total repositories, only be seen when the user\
          \ is admin."
    example:
      private_project_count: 0
      public_repo_count: 5
      total_repo_count: 2
      total_project_count: 5
      private_repo_count: 6
      public_project_count: 1
  ReplicationPolicy:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "The policy ID."
      name:
        type: "string"
        description: "The policy name."
      description:
        type: "string"
        description: "The description of the policy."
      src_registry:
        description: "The source registry."
        $ref: "#/definitions/Registry"
      dest_registry:
        description: "The destination registry."
        $ref: "#/definitions/Registry"
      dest_namespace:
        type: "string"
        description: "The destination namespace."
      trigger:
        $ref: "#/definitions/ReplicationTrigger"
      filters:
        type: "array"
        description: "The replication policy filter array."
        items:
          $ref: "#/definitions/ReplicationFilter"
      deletion:
        type: "boolean"
        description: "Whether to replicate the deletion operation."
      override:
        type: "boolean"
        description: "Whether to override the resources on the destination registry."
      enabled:
        type: "boolean"
        description: "Whether the policy is enabled or not."
      creation_time:
        type: "string"
        description: "The create time of the policy."
      update_time:
        type: "string"
        description: "The update time of the policy."
    example:
      creation_time: "creation_time"
      description: "description"
      trigger:
        trigger_settings:
          cron: "cron"
        type: "type"
      filters:
      - type: "type"
        value: "value"
      - type: "type"
        value: "value"
      enabled: true
      update_time: "update_time"
      dest_registry:
        creation_time: "creation_time"
        update_time: "update_time"
        credential:
          access_key: "access_key"
          access_secret: "access_secret"
          type: "type"
        name: "name"
        insecure: true
        description: "description"
        id: 6
        type: "type"
        url: "url"
        status: "status"
      src_registry:
        creation_time: "creation_time"
        update_time: "update_time"
        credential:
          access_key: "access_key"
          access_secret: "access_secret"
          type: "type"
        name: "name"
        insecure: true
        description: "description"
        id: 6
        type: "type"
        url: "url"
        status: "status"
      deletion: true
      name: "name"
      dest_namespace: "dest_namespace"
      id: 0
      override: true
  ReplicationTrigger:
    type: "object"
    properties:
      type:
        type: "string"
        description: "The replication policy trigger type. The valid values are manual,\
          \ event_based and scheduled."
      trigger_settings:
        $ref: "#/definitions/TriggerSettings"
    example:
      trigger_settings:
        cron: "cron"
      type: "type"
  TriggerSettings:
    type: "object"
    properties:
      cron:
        type: "string"
        description: "The cron string for scheduled trigger"
    example:
      cron: "cron"
  ReplicationFilter:
    type: "object"
    properties:
      type:
        type: "string"
        description: "The replication policy filter type."
      value:
        type: "string"
        description: "The value of replication policy filter."
    example:
      type: "type"
      value: "value"
  RegistryCredential:
    type: "object"
    properties:
      type:
        type: "string"
        description: "Credential type, such as 'basic', 'oauth'."
      access_key:
        type: "string"
        description: "Access key, e.g. user name when credential type is 'basic'."
      access_secret:
        type: "string"
        description: "Access secret, e.g. password when credential type is 'basic'."
    example:
      access_key: "access_key"
      access_secret: "access_secret"
      type: "type"
  Registry:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "The registry ID."
      url:
        type: "string"
        description: "The registry URL string."
      name:
        type: "string"
        description: "The registry name."
      credential:
        $ref: "#/definitions/RegistryCredential"
      type:
        type: "string"
        description: "Type of the registry, e.g. 'harbor'."
      insecure:
        type: "boolean"
        description: "Whether or not the certificate will be verified when Harbor\
          \ tries to access the server."
      description:
        type: "string"
        description: "Description of the registry."
      status:
        type: "string"
        description: "Health status of the registry."
      creation_time:
        type: "string"
        description: "The create time of the policy."
      update_time:
        type: "string"
        description: "The update time of the policy."
    example:
      creation_time: "creation_time"
      update_time: "update_time"
      credential:
        access_key: "access_key"
        access_secret: "access_secret"
        type: "type"
      name: "name"
      insecure: true
      description: "description"
      id: 6
      type: "type"
      url: "url"
      status: "status"
  PingRegistry:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "The ID of the registry"
      type:
        type: "string"
        description: "Type of the registry, e.g. 'harbor'."
      url:
        type: "string"
        description: "The registry address URL string."
      credential_type:
        type: "string"
        description: "Credential type of the registry, e.g. 'basic'."
      access_key:
        type: "string"
        description: "The registry access key."
      access_secret:
        type: "string"
        description: "The registry access secret."
      insecure:
        type: "boolean"
        description: "Whether or not the certificate will be verified when Harbor\
          \ tries to access the server."
  PutRegistry:
    type: "object"
    properties:
      name:
        type: "string"
        description: "The registry name."
      description:
        type: "string"
        description: "Description of the registry."
      url:
        type: "string"
        description: "The registry address URL string."
      credential_type:
        type: "string"
        description: "Credential type of the registry, e.g. 'basic'."
      access_key:
        type: "string"
        description: "The registry access key."
      access_secret:
        type: "string"
        description: "The registry access secret."
      insecure:
        type: "boolean"
        description: "Whether or not the certificate will be verified when Harbor\
          \ tries to access the server."
    example:
      credential_type: "credential_type"
      access_key: "access_key"
      name: "name"
      access_secret: "access_secret"
      insecure: true
      description: "description"
      url: "url"
  SysAdminFlag:
    type: "object"
    properties:
      sysadmin_flag:
        type: "boolean"
        description: "true-admin, false-not admin."
    example:
      sysadmin_flag: true
  UserProfile:
    type: "object"
    properties:
      email:
        type: "string"
        description: "The new email."
      realname:
        type: "string"
        description: "The new realname."
      comment:
        type: "string"
        description: "The new comment."
    example:
      comment: "comment"
      email: "email"
      realname: "realname"
  Storage:
    type: "object"
    properties:
      total:
        type: "integer"
        format: "int64"
        description: "Total volume size."
      free:
        type: "integer"
        format: "int64"
        description: "Free volume size."
    example:
      total: 0
      free: 6
  GeneralInfo:
    type: "object"
    properties:
      with_notary:
        type: "boolean"
        description: "If the Harbor instance is deployed with nested notary."
      with_chartmuseum:
        type: "boolean"
        description: "If the Harbor instance is deployed with nested chartmuseum."
      registry_url:
        type: "string"
        description: "The url of registry against which the docker command should\
          \ be issued."
      external_url:
        type: "string"
        description: "The external URL of Harbor, with protocol."
      auth_mode:
        type: "string"
        description: "The auth mode of current Harbor instance."
      project_creation_restriction:
        type: "string"
        description: "Indicate who can create projects, it could be 'adminonly' or\
          \ 'everyone'."
      self_registration:
        type: "boolean"
        description: "Indicate whether the Harbor instance enable user to register\
          \ himself."
      has_ca_root:
        type: "boolean"
        description: "Indicate whether there is a ca root cert file ready for download\
          \ in the file system."
      harbor_version:
        type: "string"
        description: "The build version of Harbor."
    example:
      with_chartmuseum: true
      registry_url: "registry_url"
      self_registration: true
      external_url: "external_url"
      has_ca_root: true
      harbor_version: "harbor_version"
      auth_mode: "auth_mode"
      with_notary: true
      project_creation_restriction: "project_creation_restriction"
  SystemInfo:
    type: "object"
    properties:
      storage:
        type: "array"
        description: "The storage of system."
        items:
          $ref: "#/definitions/Storage"
    example:
      storage:
      - total: 0
        free: 6
      - total: 0
        free: 6
  LdapConf:
    type: "object"
    properties:
      ldap_url:
        type: "string"
        description: "The url of ldap service."
      ldap_search_dn:
        type: "string"
        description: "The search dn of ldap service."
      ldap_search_password:
        type: "string"
        description: "The search password of ldap service."
      ldap_base_dn:
        type: "string"
        description: "The base dn of ldap service."
      ldap_filter:
        type: "string"
        description: "The serach filter of ldap service."
      ldap_uid:
        type: "string"
        description: "The serach uid from ldap service attributes."
      ldap_scope:
        type: "integer"
        format: "int64"
        description: "The serach scope of ldap service."
      ldap_connection_timeout:
        type: "integer"
        format: "int64"
        description: "The connect timeout of ldap service(second)."
    example:
      ldap_search_dn: "ldap_search_dn"
      ldap_uid: "ldap_uid"
      ldap_filter: "ldap_filter"
      ldap_base_dn: "ldap_base_dn"
      ldap_url: "ldap_url"
      ldap_search_password: "ldap_search_password"
      ldap_connection_timeout: 6
      ldap_scope: 0
  LdapUsers:
    type: "object"
    properties:
      ldap_username:
        type: "string"
        description: "search ldap user name based on ldapconf."
      ldap_realname:
        type: "string"
        description: "system will try to guess the user realname form \"uid\" or \"\
          cn\" attribute."
      ldap_email:
        type: "string"
        description: "system will try to guess the user email address form \"mail\"\
          \ or \"email\" attribute."
    example:
      ldap_realname: "ldap_realname"
      ldap_email: "ldap_email"
      ldap_username: "ldap_username"
  LdapImportUsers:
    type: "object"
    properties:
      ldap_uid_list:
        type: "array"
        description: "selected uid list"
        items:
          type: "string"
    example:
      ldap_uid_list:
      - "ldap_uid_list"
      - "ldap_uid_list"
  LdapFailedImportUsers:
    type: "object"
    properties:
      ldap_uid:
        type: "string"
        description: "the uid can't add to system."
      error:
        type: "string"
        description: "fail reason."
  EmailServerSetting:
    type: "object"
    properties:
      email_host:
        type: "string"
        description: "The host of email server."
      email_port:
        type: "integer"
        description: "The port of email server."
      email_username:
        type: "string"
        description: "The username of email server."
      email_password:
        type: "string"
        description: "The password of email server."
      email_ssl:
        type: "boolean"
        description: "Use ssl/tls or not."
      email_identity:
        type: "string"
        description: "The dentity of email server."
    example:
      email_ssl: true
      email_identity: "email_identity"
      email_port: 0
      email_username: "email_username"
      email_host: "email_host"
      email_password: "email_password"
  ComponentOverviewEntry:
    type: "object"
    properties:
      severity:
        type: "integer"
        description: "1-None/Negligible, 2-Unknown, 3-Low, 4-Medium, 5-High"
      count:
        type: "integer"
        description: "number of the components with certain severity."
  Configurations:
    type: "object"
    properties:
      auth_mode:
        type: "string"
        description: "The auth mode of current system, such as \"db_auth\", \"ldap_auth\""
      count_per_project:
        type: "string"
        description: "The default count quota for the new created projects."
      email_from:
        type: "string"
        description: "The sender name for Email notification."
      email_host:
        type: "string"
        description: "The hostname of SMTP server that sends Email notification."
      email_port:
        type: "integer"
        description: "The port of SMTP server."
      email_identity:
        type: "string"
        description: "By default it's empty so the email_username is picked."
      email_username:
        type: "string"
        description: "The username for authenticate against SMTP server."
      email_ssl:
        type: "boolean"
        description: "When it's set to true the system will access Email server via\
          \ TLS by default.  If it's set to false, it still will handle \"STARTTLS\"\
          \ from server side."
      email_insecure:
        type: "boolean"
        description: "Whether or not the certificate will be verified when Harbor\
          \ tries to access the email server."
      ldap_url:
        type: "string"
        description: "The URL of LDAP server."
      ldap_base_dn:
        type: "string"
        description: "The Base DN for LDAP binding."
      ldap_filter:
        type: "string"
        description: "The filter for LDAP binding."
      ldap_scope:
        type: "integer"
        description: "0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE"
      ldap_uid:
        type: "string"
        description: "The attribute which is used as identity for the LDAP binding,\
          \ such as \"CN\" or \"SAMAccountname\""
      ldap_search_dn:
        type: "string"
        description: "The DN of the user to do the search."
      ldap_timeout:
        type: "integer"
        description: "timeout in seconds for connection to LDAP server."
      ldap_group_attribute_name:
        type: "string"
        description: "The attribute which is used as identity of the LDAP group, default\
          \ is cn."
      ldap_group_base_dn:
        type: "string"
        description: "The base DN to search LDAP group."
      ldap_group_search_filter:
        type: "string"
        description: "The filter to search the ldap group."
      ldap_group_search_scope:
        type: "integer"
        description: "The scope to search ldap. '0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL,\
          \ 2-LDAP_SCOPE_SUBTREE'"
      ldap_group_admin_dn:
        type: "string"
        description: "Specify the ldap group which have the same privilege with Harbor\
          \ admin."
      oidc_client_id:
        type: "string"
        description: "The client id of the OIDC."
      oidc_client_secret:
        type: "string"
        description: "The client secret of the OIDC."
      oidc_endpoint:
        type: "string"
        description: "The URL of an OIDC-complaint server, must start with 'https://'."
      oidc_name:
        type: "string"
        description: "The name of the OIDC provider."
      oidc_scope:
        type: "string"
        description: "The scope sent to OIDC server during authentication, should\
          \ be separated by comma. It has to contain “openid”, and “offline_access”\
          . If you are using google, please remove “offline_access” from this field."
      oidc_verify_cert:
        type: "boolean"
        description: "Whether verify your OIDC server certificate, disable it if your\
          \ OIDC server is hosted via self-hosted certificate."
      project_creation_restriction:
        type: "string"
        description: "This attribute restricts what users have the permission to create\
          \ project.  It can be \"everyone\" or \"adminonly\"."
      quota_per_project_enable:
        type: "boolean"
        description: "This attribute indicates whether quota per project enabled in\
          \ harbor"
      read_only:
        type: "boolean"
        description: "'docker push' is prohibited by Harbor if you set it to true.\
          \   "
      self_registration:
        type: "boolean"
        description: "Whether the Harbor instance supports self-registration.  If\
          \ it's set to false, admin need to add user to the instance."
      storage_per_project:
        type: "string"
        description: "The default storage quota for the new created projects."
      token_expiration:
        type: "integer"
        description: "The expiration time of the token for internal Registry, in minutes."
      verify_remote_cert:
        type: "boolean"
        description: "Whether or not the certificate will be verified when Harbor\
          \ tries to access a remote Harbor instance for replication."
      scan_all_policy:
        $ref: "#/definitions/Configurations_scan_all_policy"
    example:
      email_ssl: true
      ldap_timeout: 1
      ldap_filter: "ldap_filter"
      auth_mode: "auth_mode"
      ldap_group_admin_dn: "ldap_group_admin_dn"
      ldap_group_base_dn: "ldap_group_base_dn"
      email_port: 0
      email_insecure: true
      oidc_verify_cert: true
      read_only: true
      ldap_group_attribute_name: "ldap_group_attribute_name"
      ldap_url: "ldap_url"
      token_expiration: 5
      ldap_scope: 6
      ldap_group_search_filter: "ldap_group_search_filter"
      self_registration: true
      oidc_name: "oidc_name"
      email_username: "email_username"
      ldap_base_dn: "ldap_base_dn"
      ldap_group_search_scope: 5
      oidc_client_id: "oidc_client_id"
      oidc_scope: "oidc_scope"
      project_creation_restriction: "project_creation_restriction"
      verify_remote_cert: true
      storage_per_project: "storage_per_project"
      oidc_endpoint: "oidc_endpoint"
      scan_all_policy:
        parameter:
          daily_time: 1
        type: "type"
      email_identity: "email_identity"
      oidc_client_secret: "oidc_client_secret"
      quota_per_project_enable: true
      ldap_search_dn: "ldap_search_dn"
      ldap_uid: "ldap_uid"
      count_per_project: "count_per_project"
      email_from: "email_from"
      email_host: "email_host"
  ConfigurationsResponse:
    type: "object"
    properties:
      auth_mode:
        description: "The auth mode of current system, such as \"db_auth\", \"ldap_auth\""
        $ref: "#/definitions/StringConfigItem"
      count_per_project:
        description: "The default count quota for the new created projects."
        $ref: "#/definitions/IntegerConfigItem"
      email_from:
        description: "The sender name for Email notification."
        $ref: "#/definitions/StringConfigItem"
      email_host:
        description: "The hostname of SMTP server that sends Email notification."
        $ref: "#/definitions/StringConfigItem"
      email_port:
        description: "The port of SMTP server."
        $ref: "#/definitions/IntegerConfigItem"
      email_identity:
        description: "By default it's empty so the email_username is picked."
        $ref: "#/definitions/StringConfigItem"
      email_username:
        description: "The username for authenticate against SMTP server."
        $ref: "#/definitions/StringConfigItem"
      email_ssl:
        description: "When it's set to true the system will access Email server via\
          \ TLS by default.  If it's set to false, it still will handle \"STARTTLS\"\
          \ from server side."
        $ref: "#/definitions/BoolConfigItem"
      email_insecure:
        description: "Whether or not the certificate will be verified when Harbor\
          \ tries to access the email server."
        $ref: "#/definitions/BoolConfigItem"
      ldap_url:
        description: "The URL of LDAP server."
        $ref: "#/definitions/StringConfigItem"
      ldap_base_dn:
        description: "The Base DN for LDAP binding."
        $ref: "#/definitions/StringConfigItem"
      ldap_filter:
        description: "The filter for LDAP binding."
        $ref: "#/definitions/StringConfigItem"
      ldap_scope:
        type: "integer"
        description: "0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE"
      ldap_uid:
        description: "The attribute which is used as identity for the LDAP binding,\
          \ such as \"CN\" or \"SAMAccountname\""
        $ref: "#/definitions/StringConfigItem"
      ldap_search_dn:
        type: "string"
        description: "The DN of the user to do the search."
      ldap_timeout:
        description: "timeout in seconds for connection to LDAP server."
        $ref: "#/definitions/IntegerConfigItem"
      ldap_group_attribute_name:
        description: "The attribute which is used as identity of the LDAP group, default\
          \ is cn."
        $ref: "#/definitions/StringConfigItem"
      ldap_group_base_dn:
        description: "The base DN to search LDAP group."
        $ref: "#/definitions/StringConfigItem"
      ldap_group_search_filter:
        description: "The filter to search the ldap group."
        $ref: "#/definitions/StringConfigItem"
      ldap_group_search_scope:
        description: "The scope to search ldap. '0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL,\
          \ 2-LDAP_SCOPE_SUBTREE'"
        $ref: "#/definitions/IntegerConfigItem"
      ldap_group_admin_dn:
        description: "Specify the ldap group which have the same privilege with Harbor\
          \ admin."
        $ref: "#/definitions/StringConfigItem"
      oidc_client_id:
        description: "The client id of the OIDC."
        $ref: "#/definitions/StringConfigItem"
      oidc_endpoint:
        description: "The URL of an OIDC-complaint server, must start with 'https://'."
        $ref: "#/definitions/StringConfigItem"
      oidc_name:
        description: "The name of the OIDC provider."
        $ref: "#/definitions/StringConfigItem"
      oidc_scope:
        description: "The scope sent to OIDC server during authentication, should\
          \ be separated by comma. It has to contain “openid”, and “offline_access”\
          . If you are using google, please remove “offline_access” from this field."
        $ref: "#/definitions/StringConfigItem"
      oidc_verify_cert:
        description: "Whether verify your OIDC server certificate, disable it if your\
          \ OIDC server is hosted via self-hosted certificate."
        $ref: "#/definitions/BoolConfigItem"
      project_creation_restriction:
        description: "This attribute restricts what users have the permission to create\
          \ project.  It can be \"everyone\" or \"adminonly\"."
        $ref: "#/definitions/StringConfigItem"
      quota_per_project_enable:
        description: "This attribute indicates whether quota per project enabled in\
          \ harbor"
        $ref: "#/definitions/BoolConfigItem"
      read_only:
        description: "'docker push' is prohibited by Harbor if you set it to true.\
          \   "
        $ref: "#/definitions/BoolConfigItem"
      self_registration:
        description: "Whether the Harbor instance supports self-registration.  If\
          \ it's set to false, admin need to add user to the instance."
        $ref: "#/definitions/BoolConfigItem"
      storage_per_project:
        description: "The default storage quota for the new created projects."
        $ref: "#/definitions/IntegerConfigItem"
      token_expiration:
        description: "The expiration time of the token for internal Registry, in minutes."
        $ref: "#/definitions/IntegerConfigItem"
      verify_remote_cert:
        description: "Whether or not the certificate will be verified when Harbor\
          \ tries to access a remote Harbor instance for replication."
        $ref: "#/definitions/BoolConfigItem"
      scan_all_policy:
        $ref: "#/definitions/Configurations_scan_all_policy"
    example:
      email_ssl:
        editable: true
        value: true
      ldap_timeout:
        editable: true
        value: 0
      ldap_filter:
        editable: true
        value: "value"
      auth_mode:
        editable: true
        value: "value"
      ldap_group_admin_dn:
        editable: true
        value: "value"
      ldap_group_base_dn:
        editable: true
        value: "value"
      email_port:
        editable: true
        value: 0
      email_insecure:
        editable: true
        value: true
      oidc_verify_cert:
        editable: true
        value: true
      read_only:
        editable: true
        value: true
      ldap_group_attribute_name:
        editable: true
        value: "value"
      ldap_url:
        editable: true
        value: "value"
      token_expiration:
        editable: true
        value: 0
      ldap_scope: 6
      ldap_group_search_filter:
        editable: true
        value: "value"
      self_registration:
        editable: true
        value: true
      oidc_name:
        editable: true
        value: "value"
      email_username:
        editable: true
        value: "value"
      ldap_base_dn:
        editable: true
        value: "value"
      ldap_group_search_scope:
        editable: true
        value: 0
      oidc_client_id:
        editable: true
        value: "value"
      oidc_scope:
        editable: true
        value: "value"
      project_creation_restriction:
        editable: true
        value: "value"
      verify_remote_cert:
        editable: true
        value: true
      storage_per_project:
        editable: true
        value: 0
      oidc_endpoint:
        editable: true
        value: "value"
      scan_all_policy:
        parameter:
          daily_time: 1
        type: "type"
      email_identity:
        editable: true
        value: "value"
      quota_per_project_enable:
        editable: true
        value: true
      ldap_search_dn: "ldap_search_dn"
      ldap_uid:
        editable: true
        value: "value"
      count_per_project:
        editable: true
        value: 0
      email_from:
        editable: true
        value: "value"
      email_host:
        editable: true
        value: "value"
  Label:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "The ID of label."
      name:
        type: "string"
        description: "The name of label."
      description:
        type: "string"
        description: "The description of label."
      color:
        type: "string"
        description: "The color of label."
      scope:
        type: "string"
        description: "The scope of label, g for global labels and p for project labels."
      project_id:
        type: "integer"
        description: "The project ID if the label is a project label."
      creation_time:
        type: "string"
        description: "The creation time of label."
      update_time:
        type: "string"
        description: "The update time of label."
      deleted:
        type: "boolean"
        description: "The label is deleted or not."
    example:
      creation_time: "creation_time"
      update_time: "update_time"
      deleted: true
      color: "color"
      project_id: 6
      scope: "scope"
      name: "name"
      description: "description"
      id: 0
  ProjectMemberEntity:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "the project member id"
      project_id:
        type: "integer"
        description: "the project id"
      entity_name:
        type: "string"
        description: "the name of the group member."
      role_name:
        type: "string"
        description: "the name of the role"
      role_id:
        type: "integer"
        description: "the role id"
      entity_id:
        type: "integer"
        description: "the id of entity, if the member is a user, it is user_id in\
          \ user table. if the member is a user group, it is the user group's ID in\
          \ user_group table."
      entity_type:
        type: "string"
        description: "the entity's type, u for user entity, g for group entity."
    example:
      role_name: "role_name"
      entity_type: "entity_type"
      project_id: 6
      entity_name: "entity_name"
      role_id: 1
      id: 0
      entity_id: 5
  ProjectMember:
    type: "object"
    properties:
      role_id:
        type: "integer"
        description: "The role id 1 for projectAdmin, 2 for developer, 3 for guest,\
          \ 4 for maintainer"
      member_user:
        $ref: "#/definitions/UserEntity"
      member_group:
        $ref: "#/definitions/UserGroup"
    example:
      role_id: 0
      member_group:
        group_name: "group_name"
        ldap_group_dn: "ldap_group_dn"
        id: 1
        group_type: 5
      member_user:
        user_id: 6
        username: "username"
  RoleRequest:
    type: "object"
    properties:
      role_id:
        type: "integer"
        description: "The role id 1 for projectAdmin, 2 for developer, 3 for guest,\
          \ 4 for maintainer"
    example:
      role_id: 0
  UserEntity:
    type: "object"
    properties:
      user_id:
        type: "integer"
        description: "The ID of the user."
      username:
        type: "string"
        description: "The name of the user."
    example:
      user_id: 6
      username: "username"
  UserGroup:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "The ID of the user group"
      group_name:
        type: "string"
        description: "The name of the user group"
      group_type:
        type: "integer"
        description: "The group type, 1 for LDAP group, 2 for HTTP group."
      ldap_group_dn:
        type: "string"
        description: "The DN of the LDAP group if group type is 1 (LDAP group)."
    example:
      group_name: "group_name"
      ldap_group_dn: "ldap_group_dn"
      id: 1
      group_type: 5
  StringConfigItem:
    type: "object"
    properties:
      value:
        type: "string"
        description: "The string value of current config item"
      editable:
        type: "boolean"
        description: "The configure item can be updated or not"
    example:
      editable: true
      value: "value"
  BoolConfigItem:
    type: "object"
    properties:
      value:
        type: "boolean"
        description: "The boolean value of current config item"
      editable:
        type: "boolean"
        description: "The configure item can be updated or not"
    example:
      editable: true
      value: true
  IntegerConfigItem:
    type: "object"
    properties:
      value:
        type: "integer"
        description: "The integer value of current config item"
      editable:
        type: "boolean"
        description: "The configure item can be updated or not"
    example:
      editable: true
      value: 0
  ChartAPIError:
    type: "object"
    required:
    - "error"
    properties:
      error:
        type: "string"
        description: "The error message returned by the chart API"
    description: "The error object returned by chart repository API"
  UnauthorizedChartAPIError:
    allOf:
    - $ref: "#/definitions/ChartAPIError"
    - {}
    description: "Unauthorized"
  ForbiddenChartAPIError:
    allOf:
    - $ref: "#/definitions/ChartAPIError"
    - {}
    description: "Operation is forbidden or quota exceeded"
  InternalChartAPIError:
    allOf:
    - $ref: "#/definitions/ChartAPIError"
    - {}
    description: "Internal server error occurred"
  NotFoundChartAPIError:
    allOf:
    - $ref: "#/definitions/ChartAPIError"
    - {}
    description: "Not found"
  InsufficientStorageChartAPIError:
    allOf:
    - $ref: "#/definitions/ChartAPIError"
    - {}
    description: "Insufficient storage"
  BadRequestFormatedError:
    allOf:
    - $ref: "#/definitions/ChartAPIError"
    - {}
    description: "Bad request"
  ConflictFormatedError:
    allOf:
    - $ref: "#/definitions/ChartAPIError"
    - {}
    description: "Conflicts"
  ChartMetadata:
    type: "object"
    required:
    - "apiVersion"
    - "appVersion"
    - "engine"
    - "icon"
    - "name"
    - "version"
    properties:
      name:
        type: "string"
        description: "The name of the chart"
      home:
        type: "string"
        description: "The URL to the relevant project page"
      sources:
        type: "array"
        description: "The URL to the source code of chart"
        items:
          type: "string"
      version:
        type: "string"
        description: "A SemVer 2 version of chart"
      description:
        type: "string"
        description: "A one-sentence description of chart"
      keywords:
        type: "array"
        description: "A list of string keywords"
        items:
          type: "string"
      engine:
        type: "string"
        description: "The name of template engine"
      icon:
        type: "string"
        description: "The URL to an icon file"
      apiVersion:
        type: "string"
        description: "The API version of this chart"
      appVersion:
        type: "string"
        description: "The version of the application enclosed in the chart"
      deprecated:
        type: "boolean"
        description: "Whether or not this chart is deprecated"
    description: "The metadata of chart version"
  ChartVersion:
    properties:
      labels:
        $ref: "#/definitions/Labels"
    allOf:
    - $ref: "#/definitions/ChartMetadata"
    - type: "object"
      properties:
        created:
          type: "string"
          description: "The created time of the chart entry"
        removed:
          type: "boolean"
          description: "A flag to indicate if the chart entry is removed"
        digest:
          type: "string"
          description: "The digest value of the chart entry"
        urls:
          type: "array"
          description: "The urls of the chart entry"
          items:
            type: "string"
    description: "A specified chart entry"
  GCResult:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "the id of gc job."
      job_name:
        type: "string"
        description: "the job name of gc job."
      job_kind:
        type: "string"
        description: "the job kind of gc job."
      job_parameters:
        type: "string"
        description: "the job parameters of gc job."
      schedule:
        $ref: "#/definitions/AdminJobScheduleObj"
      job_status:
        type: "string"
        description: "the status of gc job."
      deleted:
        type: "boolean"
        description: "if gc job was deleted."
      creation_time:
        type: "string"
        description: "the creation time of gc job."
      update_time:
        type: "string"
        description: "the update time of gc job."
    example:
      job_parameters: "job_parameters"
      creation_time: "creation_time"
      schedule:
        cron: "cron"
        type: "type"
      job_status: "job_status"
      update_time: "update_time"
      deleted: true
      job_name: "job_name"
      id: 0
      job_kind: "job_kind"
  AdminJobSchedule:
    type: "object"
    properties:
      schedule:
        $ref: "#/definitions/AdminJobScheduleObj"
      parameters:
        type: "object"
        description: "The parameters of admin job"
        additionalProperties:
          type: "boolean"
    example:
      schedule:
        cron: "cron"
        type: "type"
      parameters:
        key: true
  AdminJobScheduleObj:
    type: "object"
    properties:
      type:
        type: "string"
        description: "The schedule type. The valid values are 'Hourly', 'Daily', 'Weekly',\
          \ 'Custom', 'Manually' and 'None'.\n'Manually' means to trigger it right\
          \ away and 'None' means to cancel the schedule.\n"
      cron:
        type: "string"
        description: "A cron expression, a time-based job scheduler."
    example:
      cron: "cron"
      type: "type"
  SearchResult:
    type: "object"
    properties:
      name:
        type: "string"
        description: "The chart name with repo name"
      score:
        type: "integer"
        description: "The matched level"
      chart:
        $ref: "#/definitions/ChartVersion"
    description: "The chart search result item"
    example:
      score: 1
      name: "name"
      chart: ""
  Labels:
    type: "array"
    description: "A list of label"
    items:
      $ref: "#/definitions/Label"
  OverallHealthStatus:
    type: "object"
    properties:
      status:
        type: "string"
        description: "The overall health status. It is \"healthy\" only when all the\
          \ components' status are \"healthy\""
      components:
        type: "array"
        items:
          $ref: "#/definitions/ComponentHealthStatus"
    description: "The system health status"
    example:
      components:
      - name: "name"
        error: "error"
        status: "status"
      - name: "name"
        error: "error"
        status: "status"
      status: "status"
  ComponentHealthStatus:
    type: "object"
    properties:
      name:
        type: "string"
        description: "The component name"
      status:
        type: "string"
        description: "The health status of component"
      error:
        type: "string"
        description: "(optional) The error message when the status is \"unhealthy\""
    description: "The health status of component"
    example:
      name: "name"
      error: "error"
      status: "status"
  RobotAccount:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "The id of robot account"
      name:
        type: "string"
        description: "The name of robot account"
      description:
        type: "string"
        description: "The description of robot account"
      expires_at:
        type: "integer"
        description: "The expiration of robot account (in seconds)"
      project_id:
        type: "integer"
        description: "The project id of robot account"
      disabled:
        type: "boolean"
        description: "The robot account is disable or enable"
      creation_time:
        type: "string"
        description: "The creation time of the robot account"
      update_time:
        type: "string"
        description: "The update time of the robot account"
    description: "The object of robot account"
    example:
      creation_time: "creation_time"
      update_time: "update_time"
      expires_at: 6
      project_id: 1
      name: "name"
      description: "description"
      disabled: true
      id: 0
  RobotAccountCreate:
    type: "object"
    properties:
      name:
        type: "string"
        description: "The name of robot account"
      description:
        type: "string"
        description: "The description of robot account"
      expires_at:
        type: "integer"
        description: "The expiration time on or after which the JWT MUST NOT be accepted\
          \ for processing."
      access:
        type: "array"
        description: "The permission of robot account"
        items:
          $ref: "#/definitions/RobotAccountAccess"
    example:
      expires_at: 0
      access:
      - resource: "resource"
        action: "action"
      - resource: "resource"
        action: "action"
      name: "name"
      description: "description"
  RobotAccountPostRep:
    type: "object"
    properties:
      name:
        type: "string"
        description: "the name of robot account"
      token:
        type: "string"
        description: "the token of robot account"
    example:
      name: "name"
      token: "token"
  RobotAccountAccess:
    type: "object"
    properties:
      resource:
        type: "string"
        description: "the resource of harbor"
      action:
        type: "string"
        description: "the action to resource that perdefined in harbor rbac"
    example:
      resource: "resource"
      action: "action"
  RobotAccountUpdate:
    type: "object"
    properties:
      disabled:
        type: "boolean"
        description: "The robot account is disable or enable"
    example:
      disabled: true
  Permission:
    type: "object"
    properties:
      resource:
        type: "string"
        description: "The permission resoruce"
      action:
        type: "string"
        description: "The permission action"
    description: "The permission"
    example:
      resource: "resource"
      action: "action"
  RegistryInfo:
    type: "object"
    properties:
      type:
        type: "string"
        description: "The registry type"
      description:
        type: "string"
        description: "The description"
      supported_resource_filters:
        type: "array"
        description: "The filters that the registry supports"
        items:
          $ref: "#/definitions/FilterStyle"
      supported_triggers:
        type: "array"
        description: "The triggers that the registry supports"
        items:
          type: "string"
    description: "The registry info contains the base info and capability declarations\
      \ of the registry"
    example:
      supported_triggers:
      - "supported_triggers"
      - "supported_triggers"
      description: "description"
      type: "type"
      supported_resource_filters:
      - values:
        - "values"
        - "values"
        style: "style"
        type: "type"
      - values:
        - "values"
        - "values"
        style: "style"
        type: "type"
  FilterStyle:
    type: "object"
    properties:
      type:
        type: "string"
        description: "The filter type"
      style:
        type: "string"
        description: "The filter style"
      values:
        type: "array"
        description: "The filter values"
        items:
          type: "string"
    description: "The style of the resource filter"
    example:
      values:
      - "values"
      - "values"
      style: "style"
      type: "type"
  ReplicationExecution:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "The ID"
      policy_id:
        type: "integer"
        description: "The policy ID"
      status:
        type: "string"
        description: "The status"
      status_text:
        type: "string"
        description: "The status text"
      trigger:
        type: "string"
        description: "The trigger mode"
      total:
        type: "integer"
        description: "The total count of all tasks"
      failed:
        type: "integer"
        description: "The count of failed tasks"
      succeed:
        type: "integer"
        description: "The count of succeed tasks"
      in_progress:
        type: "integer"
        description: "The count of in_progress tasks"
      stopped:
        type: "integer"
        description: "The count of stopped tasks"
      start_time:
        type: "string"
        description: "The start time"
      end_time:
        type: "string"
        description: "The end time"
    description: "The replication execution"
    example:
      start_time: "start_time"
      total: 1
      in_progress: 2
      stopped: 7
      policy_id: 6
      succeed: 5
      end_time: "end_time"
      id: 0
      status_text: "status_text"
      trigger: "trigger"
      failed: 5
      status: "status"
  ReplicationTask:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "The ID"
      execution_id:
        type: "integer"
        description: "The execution ID"
      resource_type:
        type: "string"
        description: "The resource type"
      src_resource:
        type: "string"
        description: "The source resource"
      dst_resource:
        type: "string"
        description: "The destination resource"
      job_id:
        type: "string"
        description: "The job ID"
      status:
        type: "string"
        description: "The status"
      start_time:
        type: "string"
        description: "The start time"
      end_time:
        type: "string"
        description: "The end time"
    description: "The replication task"
    example:
      execution_id: 6
      dst_resource: "dst_resource"
      start_time: "start_time"
      src_resource: "src_resource"
      job_id: "job_id"
      resource_type: "resource_type"
      end_time: "end_time"
      id: 0
      status: "status"
  Namespace:
    type: "object"
    properties:
      name:
        type: "string"
        description: "The name of namespace"
      metadata:
        type: "object"
        description: "The metadata of namespace"
        properties: {}
    description: "The namespace of registry"
    example:
      metadata: "{}"
      name: "name"
  CVEAllowlist:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "ID of the allowlist"
      project_id:
        type: "integer"
        description: "ID of the project which the allowlist belongs to.  For system\
          \ level allowlist this attribute is zero."
      expires_at:
        type: "integer"
        description: "the time for expiration of the allowlist, in the form of seconds\
          \ since epoch.  This is an optional attribute, if it's not set the CVE allowlist\
          \ does not expire."
      items:
        type: "array"
        items:
          $ref: "#/definitions/CVEAllowlistItem"
    description: "The CVE Allowlist for system or project"
    example:
      expires_at: 2
      project_id: 3
      id: 9
      items:
      - cve_id: "cve_id"
      - cve_id: "cve_id"
  CVEAllowlistItem:
    type: "object"
    properties:
      cve_id:
        type: "string"
        description: "The ID of the CVE, such as \"CVE-2019-10164\""
    description: "The item in CVE allowlist"
    example:
      cve_id: "cve_id"
  ResourceList:
    type: "object"
    additionalProperties:
      type: "integer"
      format: "int64"
  QuotaUpdateReq:
    type: "object"
    properties:
      hard:
        description: "The new hard limits for the quota"
        $ref: "#/definitions/ResourceList"
    example:
      hard: {}
  QuotaRefObject:
    type: "object"
    additionalProperties: {}
  Quota:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "ID of the quota"
      ref:
        description: "The reference object of the quota"
        $ref: "#/definitions/QuotaRefObject"
      hard:
        description: "The hard limits of the quota"
        $ref: "#/definitions/ResourceList"
      used:
        description: "The used status of the quota"
        $ref: "#/definitions/ResourceList"
      creation_time:
        type: "string"
        description: "the creation time of the quota"
      update_time:
        type: "string"
        description: "the update time of the quota"
    description: "The quota object"
    example:
      creation_time: "creation_time"
      ref: {}
      update_time: "update_time"
      id: 0
      hard: {}
  WebhookTargetObject:
    type: "object"
    properties:
      type:
        type: "string"
        description: "The webhook target notify type."
      address:
        type: "string"
        description: "The webhook target address."
      auth_header:
        type: "string"
        description: "The webhook auth header."
      skip_cert_verify:
        type: "boolean"
        description: "Whether or not to skip cert verify."
    description: "The webhook policy target object."
    example:
      address: "address"
      skip_cert_verify: true
      type: "type"
      auth_header: "auth_header"
  WebhookPolicy:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "The webhook policy ID."
      name:
        type: "string"
        description: "The name of webhook policy."
      description:
        type: "string"
        description: "The description of webhook policy."
      project_id:
        type: "integer"
        description: "The project ID of webhook policy."
      targets:
        type: "array"
        items:
          $ref: "#/definitions/WebhookTargetObject"
      event_types:
        type: "array"
        items:
          type: "string"
      creator:
        type: "string"
        description: "The creator of the webhook policy."
      creation_time:
        type: "string"
        description: "The create time of the webhook policy."
      update_time:
        type: "string"
        description: "The update time of the webhook policy."
      enabled:
        type: "boolean"
        description: "Whether the webhook policy is enabled or not."
    description: "The webhook policy object"
    example:
      creation_time: "creation_time"
      creator: "creator"
      update_time: "update_time"
      event_types:
      - "event_types"
      - "event_types"
      project_id: 6
      name: "name"
      description: "description"
      id: 0
      targets:
      - address: "address"
        skip_cert_verify: true
        type: "type"
        auth_header: "auth_header"
      - address: "address"
        skip_cert_verify: true
        type: "type"
        auth_header: "auth_header"
      enabled: true
  WebhookLastTrigger:
    type: "object"
    properties:
      event_type:
        type: "string"
        description: "The webhook event type."
      enabled:
        type: "boolean"
        description: "Whether or not the webhook policy enabled."
      creation_time:
        type: "string"
        description: "The creation time of webhook policy."
      last_trigger_time:
        type: "string"
        description: "The last trigger time of webhook policy."
    description: "The webhook policy and last trigger time group by event type."
    example:
      creation_time: "creation_time"
      event_type: "event_type"
      last_trigger_time: "last_trigger_time"
      enabled: true
  WebhookJob:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "The webhook job ID."
      policy_id:
        type: "integer"
        format: "int64"
        description: "The webhook policy ID."
      event_type:
        type: "string"
        description: "The webhook job event type."
      notify_type:
        type: "string"
        description: "The webhook job notify type."
      status:
        type: "string"
        description: "The webhook job status."
      job_detail:
        type: "string"
        description: "The webhook job notify detailed data."
      creation_time:
        type: "string"
        description: "The webhook job creation time."
      update_time:
        type: "string"
        description: "The webhook job update time."
    description: "The webhook job."
    example:
      creation_time: "creation_time"
      notify_type: "notify_type"
      job_detail: "job_detail"
      update_time: "update_time"
      event_type: "event_type"
      policy_id: 6
      id: 0
      status: "status"
  RetentionMetadata:
    type: "object"
    properties:
      templates:
        type: "array"
        description: "templates"
        items:
          $ref: "#/definitions/RetentionRuleMetadata"
      scope_selectors:
        type: "array"
        description: "supported scope selectors"
        items:
          $ref: "#/definitions/RetentionSelectorMetadata"
      tag_selectors:
        type: "array"
        description: "supported tag selectors"
        items:
          $ref: "#/definitions/RetentionSelectorMetadata"
    description: "the tag retention metadata"
    example:
      tag_selectors:
      - kind: "kind"
        decorations:
        - "decorations"
        - "decorations"
        display_text: "display_text"
      - kind: "kind"
        decorations:
        - "decorations"
        - "decorations"
        display_text: "display_text"
      templates:
      - rule_template: "rule_template"
        action: "action"
        params:
        - unit: "unit"
          type: "type"
          required: true
        - unit: "unit"
          type: "type"
          required: true
        display_text: "display_text"
      - rule_template: "rule_template"
        action: "action"
        params:
        - unit: "unit"
          type: "type"
          required: true
        - unit: "unit"
          type: "type"
          required: true
        display_text: "display_text"
      scope_selectors:
      - kind: "kind"
        decorations:
        - "decorations"
        - "decorations"
        display_text: "display_text"
      - kind: "kind"
        decorations:
        - "decorations"
        - "decorations"
        display_text: "display_text"
  RetentionRuleMetadata:
    type: "object"
    properties:
      rule_template:
        type: "string"
        description: "rule id"
      display_text:
        type: "string"
        description: "rule display text"
      action:
        type: "string"
        description: "rule action"
      params:
        type: "array"
        description: "rule params"
        items:
          $ref: "#/definitions/RetentionRuleParamMetadata"
    description: "the tag retention rule metadata"
    example:
      rule_template: "rule_template"
      action: "action"
      params:
      - unit: "unit"
        type: "type"
        required: true
      - unit: "unit"
        type: "type"
        required: true
      display_text: "display_text"
  RetentionRuleParamMetadata:
    type: "object"
    properties:
      type:
        type: "string"
      unit:
        type: "string"
      required:
        type: "boolean"
    description: "rule param"
    example:
      unit: "unit"
      type: "type"
      required: true
  RetentionSelectorMetadata:
    type: "object"
    properties:
      display_text:
        type: "string"
      kind:
        type: "string"
      decorations:
        type: "array"
        items:
          type: "string"
    description: "retention selector"
    example:
      kind: "kind"
      decorations:
      - "decorations"
      - "decorations"
      display_text: "display_text"
  RetentionPolicy:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      algorithm:
        type: "string"
      rules:
        type: "array"
        items:
          $ref: "#/definitions/RetentionRule"
      trigger:
        $ref: "#/definitions/RetentionRuleTrigger"
      scope:
        $ref: "#/definitions/RetentionPolicyScope"
    description: "retention policy"
    example:
      scope:
        ref: 5
        level: "level"
      rules:
      - template: "template"
        tag_selectors:
        - kind: "kind"
          pattern: "pattern"
          extras: "extras"
          decoration: "decoration"
        - kind: "kind"
          pattern: "pattern"
          extras: "extras"
          decoration: "decoration"
        scope_selectors:
          key:
          - kind: "kind"
            pattern: "pattern"
            extras: "extras"
            decoration: "decoration"
          - kind: "kind"
            pattern: "pattern"
            extras: "extras"
            decoration: "decoration"
        action: "action"
        disabled: true
        id: 6
        priority: 1
        params:
          key: "{}"
      - template: "template"
        tag_selectors:
        - kind: "kind"
          pattern: "pattern"
          extras: "extras"
          decoration: "decoration"
        - kind: "kind"
          pattern: "pattern"
          extras: "extras"
          decoration: "decoration"
        scope_selectors:
          key:
          - kind: "kind"
            pattern: "pattern"
            extras: "extras"
            decoration: "decoration"
          - kind: "kind"
            pattern: "pattern"
            extras: "extras"
            decoration: "decoration"
        action: "action"
        disabled: true
        id: 6
        priority: 1
        params:
          key: "{}"
      id: 0
      trigger:
        settings: "{}"
        references: "{}"
        kind: "kind"
      algorithm: "algorithm"
  RetentionRuleTrigger:
    type: "object"
    properties:
      kind:
        type: "string"
      settings:
        type: "object"
        properties: {}
      references:
        type: "object"
        properties: {}
    example:
      settings: "{}"
      references: "{}"
      kind: "kind"
  RetentionPolicyScope:
    type: "object"
    properties:
      level:
        type: "string"
      ref:
        type: "integer"
    example:
      ref: 5
      level: "level"
  RetentionRule:
    type: "object"
    properties:
      id:
        type: "integer"
      priority:
        type: "integer"
      disabled:
        type: "boolean"
      action:
        type: "string"
      template:
        type: "string"
      params:
        type: "object"
        additionalProperties:
          type: "object"
          properties: {}
      tag_selectors:
        type: "array"
        items:
          $ref: "#/definitions/RetentionSelector"
      scope_selectors:
        type: "object"
        additionalProperties:
          type: "array"
          items:
            $ref: "#/definitions/RetentionSelector"
    example:
      template: "template"
      tag_selectors:
      - kind: "kind"
        pattern: "pattern"
        extras: "extras"
        decoration: "decoration"
      - kind: "kind"
        pattern: "pattern"
        extras: "extras"
        decoration: "decoration"
      scope_selectors:
        key:
        - kind: "kind"
          pattern: "pattern"
          extras: "extras"
          decoration: "decoration"
        - kind: "kind"
          pattern: "pattern"
          extras: "extras"
          decoration: "decoration"
      action: "action"
      disabled: true
      id: 6
      priority: 1
      params:
        key: "{}"
  RetentionSelector:
    type: "object"
    properties:
      kind:
        type: "string"
      decoration:
        type: "string"
      pattern:
        type: "string"
      extras:
        type: "string"
    example:
      kind: "kind"
      pattern: "pattern"
      extras: "extras"
      decoration: "decoration"
  RetentionExecution:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      policy_id:
        type: "integer"
        format: "int64"
      start_time:
        type: "string"
      end_time:
        type: "string"
      status:
        type: "string"
      trigger:
        type: "string"
      dry_run:
        type: "boolean"
    example:
      start_time: "start_time"
      policy_id: 6
      end_time: "end_time"
      dry_run: true
      id: 0
      trigger: "trigger"
      status: "status"
  RetentionExecutionTask:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      execution_id:
        type: "integer"
        format: "int64"
      repository:
        type: "string"
      job_id:
        type: "string"
      status:
        type: "string"
      status_code:
        type: "integer"
      status_revision:
        type: "integer"
        format: "int64"
      start_time:
        type: "string"
      end_time:
        type: "string"
      total:
        type: "integer"
      retained:
        type: "integer"
    example:
      execution_id: 6
      start_time: "start_time"
      retained: 2
      total: 5
      status_code: 1
      job_id: "job_id"
      end_time: "end_time"
      status_revision: 5
      id: 0
      repository: "repository"
      status: "status"
  QuotaSwitcher:
    type: "object"
    properties:
      enabled:
        type: "boolean"
        description: "The quota is enable or disable"
  ImmutableTagRule:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      project_id:
        type: "integer"
        format: "int64"
      tag_filter:
        type: "string"
      enabled:
        type: "boolean"
    example:
      project_id: 6
      tag_filter: "tag_filter"
      id: 0
      enabled: true
  ScannerRegistration:
    type: "object"
    properties:
      uuid:
        type: "string"
        description: "The unique identifier of this registration."
      name:
        type: "string"
        example: "Clair"
        description: "The name of this registration."
      description:
        type: "string"
        example: "A free-to-use tool that scans container images for package vulnerabilities.\n"
        description: "An optional description of this registration."
      url:
        type: "string"
        format: "url"
        example: "http://harbor-scanner-clair:8080"
        description: "A base URL of the scanner adapter"
      disabled:
        type: "boolean"
        description: "Indicate whether the registration is enabled or not"
        default: false
      is_default:
        type: "boolean"
        description: "Indicate if the registration is set as the system default one"
        default: false
      health:
        type: "string"
        example: "healthy"
        description: "Indicate the healthy of the registration"
        default: ""
      auth:
        type: "string"
        example: "Bearer"
        description: "Specify what authentication approach is adopted for the HTTP\
          \ communications.\nSupported types Basic\", \"Bearer\" and api key header\
          \ \"X-ScannerAdapter-API-Key\"\n"
        default: ""
      access_credential:
        type: "string"
        example: "Bearer: JWTTOKENGOESHERE"
        description: "An optional value of the HTTP Authorization header sent with\
          \ each request to the Scanner Adapter API.\n"
      skip_certVerify:
        type: "boolean"
        description: "Indicate if skip the certificate verification when sending HTTP\
          \ requests"
        default: false
      use_internal_addr:
        type: "boolean"
        description: "Indicate whether use internal registry addr for the scanner\
          \ to pull content or not"
        default: false
      adapter:
        type: "string"
        example: "Clair"
        description: "Optional property to describe the name of the scanner registration"
      vendor:
        type: "string"
        example: "CentOS"
        description: "Optional property to describe the vendor of the scanner registration"
      version:
        type: "string"
        example: "1.0.1"
        description: "Optional property to describe the version of the scanner registration"
    description: "Registration represents a named configuration for invoking a scanner\
      \ via its adapter.\n"
    example:
      skip_certVerify: false
      adapter: "Clair"
      auth: "Bearer"
      description: "A free-to-use tool that scans container images for package vulnerabilities.\n"
      health: "healthy"
      is_default: false
      uuid: "uuid"
      version: "1.0.1"
      url: "http://harbor-scanner-clair:8080"
      vendor: "CentOS"
      name: "Clair"
      disabled: false
      use_internal_addr: false
      access_credential: "Bearer: JWTTOKENGOESHERE"
  ScannerRegistrationReq:
    type: "object"
    properties:
      name:
        type: "string"
        example: "Clair"
        description: "The name of this registration"
      description:
        type: "string"
        example: "A free-to-use tool that scans container images for package vulnerabilities.\n"
        description: "An optional description of this registration."
      url:
        type: "string"
        format: "url"
        example: "http://harbor-scanner-clair:8080"
        description: "A base URL of the scanner adapter."
      auth:
        type: "string"
        example: "Bearer"
        description: "Specify what authentication approach is adopted for the HTTP\
          \ communications.\nSupported types Basic\", \"Bearer\" and api key header\
          \ \"X-ScannerAdapter-API-Key\"\n"
        default: ""
      access_credential:
        type: "string"
        example: "Bearer: JWTTOKENGOESHERE"
        description: "An optional value of the HTTP Authorization header sent with\
          \ each request to the Scanner Adapter API.\n"
      skip_certVerify:
        type: "boolean"
        description: "Indicate if skip the certificate verification when sending HTTP\
          \ requests"
        default: false
      use_internal_addr:
        type: "boolean"
        description: "Indicate whether use internal registry addr for the scanner\
          \ to pull content or not"
        default: false
      disabled:
        type: "boolean"
        description: "Indicate whether the registration is enabled or not"
        default: false
    example:
      skip_certVerify: false
      auth: "Bearer"
      name: "Clair"
      description: "A free-to-use tool that scans container images for package vulnerabilities.\n"
      disabled: false
      use_internal_addr: false
      url: "http://harbor-scanner-clair:8080"
      access_credential: "Bearer: JWTTOKENGOESHERE"
  ScannerRegistrationSettings:
    type: "object"
    properties:
      name:
        type: "string"
        example: "Clair"
        description: "The name of this registration"
      url:
        type: "string"
        format: "url"
        example: "http://harbor-scanner-clair:8080"
        description: "A base URL of the scanner adapter."
      auth:
        type: "string"
        description: "Specify what authentication approach is adopted for the HTTP\
          \ communications.\nSupported types Basic\", \"Bearer\" and api key header\
          \ \"X-ScannerAdapter-API-Key\"\n"
        default: ""
      access_credential:
        type: "string"
        example: "Bearer: JWTTOKENGOESHERE"
        description: "An optional value of the HTTP Authorization header sent with\
          \ each request to the Scanner Adapter API.\n"
    example:
      auth: "auth"
      name: "Clair"
      url: "http://harbor-scanner-clair:8080"
      access_credential: "Bearer: JWTTOKENGOESHERE"
  IsDefault:
    type: "object"
    properties:
      is_default:
        type: "boolean"
        description: "A flag indicating whether a scanner registration is default."
    example:
      is_default: true
  Scanner:
    type: "object"
    properties:
      name:
        type: "string"
        example: "Clair"
        description: "Name of the scanner"
      vendor:
        type: "string"
        example: "CentOS"
        description: "Name of the scanner provider"
      version:
        type: "string"
        example: "1.0.1"
        description: "Version of the scanner adapter"
    example:
      vendor: "CentOS"
      name: "Clair"
      version: "1.0.1"
  ScannerCapability:
    type: "object"
    properties:
      consumes_mime_types:
        type: "array"
        items:
          type: "string"
          example: "application/vnd.docker.distribution.manifest.v2+json"
      produces_mime_types:
        type: "array"
        items:
          type: "string"
          example: "application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0"
    example:
      consumes_mime_types:
      - "application/vnd.docker.distribution.manifest.v2+json"
      - "application/vnd.docker.distribution.manifest.v2+json"
      produces_mime_types:
      - "application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0"
      - "application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0"
  ScannerAdapterMetadata:
    type: "object"
    properties:
      name:
        $ref: "#/definitions/Scanner"
      capabilities:
        type: "array"
        items:
          $ref: "#/definitions/ScannerCapability"
      properties:
        type: "object"
        example:
          harbor.scanner-adapter/registry-authorization-type: "Bearer"
        additionalProperties:
          type: "string"
    description: "The metadata info of the scanner adapter"
    example:
      capabilities:
      - consumes_mime_types:
        - "application/vnd.docker.distribution.manifest.v2+json"
        - "application/vnd.docker.distribution.manifest.v2+json"
        produces_mime_types:
        - "application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0"
        - "application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0"
      - consumes_mime_types:
        - "application/vnd.docker.distribution.manifest.v2+json"
        - "application/vnd.docker.distribution.manifest.v2+json"
        produces_mime_types:
        - "application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0"
        - "application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0"
      name:
        vendor: "CentOS"
        name: "Clair"
        version: "1.0.1"
      properties:
        harbor.scanner-adapter/registry-authorization-type: "Bearer"
  ProjectScanner:
    type: "object"
    properties:
      uuid:
        type: "string"
        description: "The identifier of the scanner registration"
    example:
      uuid: "uuid"
  Stats:
    type: "object"
    properties:
      total:
        type: "integer"
        format: "int"
        example: 100
        description: "The total number of scan processes triggered by the scan all\
          \ action"
      completed:
        type: "integer"
        format: "int"
        example: 90
        description: "The number of the finished scan processes triggered by the scan\
          \ all action"
      requester:
        type: "string"
        example: "28"
        description: "The requester identity which usually uses the ID of the scan\
          \ all job"
      metrics:
        type: "object"
        example:
          Success: 5
          Error: "2,"
          Running: 3
        description: "The metrics data for the each status"
        additionalProperties:
          type: "integer"
          format: "int"
          example: 10
    description: "Stats provides the overall progress of the scan all process."
    example:
      requester: "28"
      total: 100
      completed: 90
      metrics:
        Success: 5
        Error: "2,"
        Running: 3
  SupportedWebhookEventTypes:
    type: "object"
    properties:
      event_type:
        type: "array"
        items:
          $ref: "#/definitions/EventType"
      notify_type:
        type: "array"
        items:
          $ref: "#/definitions/NotifyType"
    description: "Supportted webhook event types and notify types."
    example:
      notify_type:
      - "http"
      - "http"
      event_type:
      - "pullImage"
      - "pullImage"
  EventType:
    type: "string"
    description: "Webhook supportted event type."
    example: "pullImage"
  NotifyType:
    type: "string"
    description: "Webhook supportted notify type."
    example: "http"
  input_secret:
    type: "object"
    properties:
      secret:
        type: "string"
        description: "The new secret"
  endpoint:
    type: "object"
    properties:
      url:
        type: "string"
        description: "The URL of OIDC endpoint to be tested."
      verify_cert:
        type: "boolean"
        description: "Whether the certificate should be verified"
  action:
    type: "object"
    properties:
      dry_run:
        type: "boolean"
  action_1:
    type: "object"
    properties:
      action:
        type: "string"
  ProjectSummary_quota:
    type: "object"
    properties:
      hard:
        description: "The hard limits of the quota"
        $ref: "#/definitions/ResourceList"
      used:
        description: "The used status of the quota"
        $ref: "#/definitions/ResourceList"
  Configurations_scan_all_policy_parameter:
    type: "object"
    properties:
      daily_time:
        type: "integer"
        description: "The offset in seconds of UTC 0 o'clock, only valid when the\
          \ policy type is \"daily\""
    description: "The parameters of the policy, the values are dependant on the type\
      \ of the policy."
    example:
      daily_time: 1
  Configurations_scan_all_policy:
    type: "object"
    properties:
      type:
        type: "string"
        description: "The type of scan all policy, currently the valid values are\
          \ \"none\" and \"daily\""
      parameter:
        $ref: "#/definitions/Configurations_scan_all_policy_parameter"
    example:
      parameter:
        daily_time: 1
      type: "type"
parameters:
  query:
    name: "q"
    in: "query"
    description: "Query string to query resources. Supported query patterns are \"\
      exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with\
      \ union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1\
      \ v2 v3))\". The value of range and list can be string(enclosed by \" or '),\
      \ integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns\
      \ should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]"
    required: false
    type: "string"
    x-exportParamName: "Q"
    x-optionalDataType: "String"
responses:
  OK:
    description: "Success"
  Created:
    description: "Created"
    headers:
      Location:
        type: "string"
        description: "The URL of the created resource"
  BadRequest:
    description: "Bad Request"
  Unauthorized:
    description: "Unauthorized"
  Forbidden:
    description: "Forbidden"
  NotFound:
    description: "Not Found"
  Conflict:
    description: "Conflict"
  PreconditionFailed:
    description: "Precondition Failed"
  UnsupportedMediaType:
    description: "The Media Type of the request is not supported, it has to be \"\
      application/json\""
  InternalServerError:
    description: "Internal Server Error"
